-
    name: kfrench
    mail: ''
    subject: '.Net - Author Does Not Understand .Net''s Purpose!'
    hostname: 163.191.100.10
    created: '1152194873'
    body: "It appears Kirk does not understand that Java and .Net have two opposite/unrelated goals.\r\n\r\n.Net is a framework designed for one purpose:  allowing programmers to code the same Windows project using any popular language of their choosing.  For example, it does not matter that Kirk prefers using Python and his coworker prefers C++ for working on the same Windows project.  They each can use what they want and .Net will assemble the variety of code into working code.  .Net's goals do not involve generating cross-platform code - it is solely focused on allowing a wide variety of languages to compile together to generate Windows code.  Does .Net accomplish this goal?  Absolutely.\r\n\r\nJava, on the other hand, has a completely different goal.  Java's main goal is to code cross-platform.  Does Java accomplish this goal?  Absolutely.\r\n\r\nHow is it that so many smart and experienced programmers just don't understand or know the purpose of .Net?  Maybe its just anti-Microsoft bias.\r\n\r\nIn sum, comparing .Net to Java is analogous to comparing apples to oranges.  A more valid/interesting comparison is to examine the pros and cons of Java vs. C#, or Java vs. C++.  But of course, the results of such comparrisons depend on the project."
-
    name: 'Kirk Strauser'
    mail: ''
    subject: 'Author understands it quite well'
    hostname: 208.162.254.122
    created: '1152326110'
    body: "I'm sure they have many orthogonal goals, but that doesn't address the ends they <em>do</em> share.  kfrench does not understand that goals and other irrelevant issues aside, .NET and Java are nearly identical animals.  Both are intended to be cross-platform - unless you thought Microsoft submitted all those documents to ECMA just for giggles.  Both VMs support multiple non-\"native\" languages - compare Jython for Java and IronPython for .NET.\r\n\r\nSure, there are minor differences here and there, but it's misleading to claim that they're inherently divergent."
-
    name: 'Terry Hancock'
    mail: ''
    subject: 'Python is more cross-platform than either'
    hostname: 68.93.224.4
    created: '1152528120'
    body: "In my experience, if you can rely on pure-python packages to do most of your work , and make reasonable choices for GUI toolkits, etc, Python is a better bet for cross-platform ability.\r\n\r\nI develop exclusively on Linux, but my Python code seems to run without effort on FreeBSD, Windows, Mac, and I've even heard a report from a user using an embedded system.  I never gave any serious consideration to the cross-platform issue. I just write stuff, and it seems to be portable merely by virtue of being in Python.  Admittedly, I'm not seriously pushing the envelope -- I've mostly written Zope product code and some less demanding non-GUI stuff.\r\n\r\nThere are obvious limits of course -- some GUI toolkits aren't cross platform, and all are written in a lower-level language.\r\n\r\nThat's true of Java too, though. You have to stick to pure-Java stuff if you want the cross-platform advantages, and that often means slow, rather unresponsive GUIs, and so on.\r\n\r\nThe real problem with Java, of course, is that the end-user must install the JRE. Usually, they have to do this themselves because Sun's peculiar licensing has made it awkward for free software OSs to bundle it (they've recently made improvements, but from what I've heard, it's still an issue and Java is just about 50/50 on being kicked right back out of Debian 'non-free'. Nevermind about its chances of getting into 'main').\r\n\r\nOf course, Sun may finally come clean and release all of Java under a free license, but after all this time, do you really want to go with Sun? What about all that effort on Kaffe and the other free Java/JRE clones? And even if Sun does become the standard, there's still all those others out there.\r\n\r\nSun's \"write once, run anywhere\" marketing promise is badly implemented, simply because of the decision to keep the source proprietary. If they'd just gone the ISO route instead, they'd be ahead of the game, and Java probably would've swept the field.  Instead, it's limped along as a \"language only pointed-haired-bosses like\", failing to take the lead away from C++ (which really deserves to be toppled).  Community-derived languages like Perl, Python, and Ruby are filling the niche instead.\r\n\r\nSo at this point, Java's looking pretty limited. Sure there are lots of libraries, but most are proprietary and there is lots of duplication of function. There's more scope to the libraries available for Perl or Python, and the bulk of them are free software, so they become the standards. Sure Java is still the suit-programmer favorite, because the PHBs like it, as mentioned above. But that's measuring the marketing, not the product.\r\n\r\nThe biggest problem with Java is that its ideas are outmoded. The Java language is too heavily rooted in the classical object-oriented paradigm and the so-called \"bondage and discipline\" approach to programming. The result is bloated, oversized and under-flexible code, resulting in less code reuse and more re-writing of the same old ideas (of course, that's a plus if you're paid by the hour). This means that Java is both too low-level (like C++) and too highly-interpreted (means \"slow\"), so that it's really a \"worst of both worlds\" language).\r\n\r\nPython has the \"slow\" problem, but it makes up for it by being a \"very high level language\" and therefore really, really rapid to develop in. Like Java, it has a strong OOP focus, but without all the baggage.\r\n\r\nISTM that Java's opportunity came and went: Sun missed it because they didn't open the code and set the standard.\r\n\r\nIf I were you, I'd stick to my guns and advocate Python -- or at least a free software platform. Single vendor is bad, bad, bad.\r\n"
-
    name: orsoihaveread
    mail: ''
    subject: Hmm
    hostname: 207.237.92.53
    created: '1152565029'
    body: "Your analysis echoes the rest of your opinons: pretty short sighted. \r\n\r\nNot sure how a free software zealot like yourself wouldn't include ruby on your short list. Duh. Mention a functional language though, get some of your street cred back.\r\n\r\nIn the end, it's all the same crap. Execution is everything and you can build perfectly useful, maintainable applications in very nearly any technology.\r\n\r\nMost folks would actually get more done if they had less technology religion in their lives, *either* direction, mind you.\r\n\r\nPython's a great choice for certain types of application needs. A nice ws tier written in ruby or python seems like a good choice, WinForms would make wiring up to this tier easier than pie for GUIs, you can use rails or django for web presentation tiers.  \r\n\r\nThe weakness I see imposed by your blinders is that building a disconected smart client to consume ws is orders of magnitude easier using WinForms. Go do it in python + widgets, but you owe it to your boss to quantify how much more he's paying for that specific choice. Unless you're just paying lipservice to his trust.\r\n\r\nAdditionally, your characterization of the CLR == JVM is a fairly large oversimplification. Likewise, you've glossed over the entire IL->JIT/NGen->native compilation cycle when saying both \"compile into bytecode\". It gets worse when you go on to refer to IronPython as non-\"native\" (it's not, the CLR is language agnostic, maybe read some of the ECMA docs?). Frankly, I read this and I see \"small-time developer/zealot has an opinion\" but I can't put much weight on it because you don't even go into a cogent analysis of the oss options, let along the fact that you don't seem informed enough about the non-oss to make decisions I would view as informed.\r\n\r\nI'd rather see your team use shell scripts, it would give me something to laugh about regularly. "
-
    name: 'Kirk Strauser'
    mail: ''
    subject: 'Purely pragmatic'
    hostname: 204.26.70.70
    created: '1152629117'
    body: "I haven't used Ruby.  Nothing personal against it; I just haven't had the time.\r\n\r\nWe use Zope extensively already, so we'd probably take advantage of that codebase rather than starting over with RoR (especially since no one here already knows Ruby).\r\n\r\nWe've actually considered using XUL, either via XULRunner or inside Firefox/Mozilla for frontend client development, or possibly even good ol' HTML.  I'd have to say the latter looks far more interesting for its maintenance benefits - clients are only a page reload away from seeing a new interface at any given time - but it's still an open issue.  We could even use VB.NET or similar, as long as it were constrained to the interface and our core infrastructure didn't depend on it.\r\n\r\nIronPython is non-\"native\" in the sense that it doesn't ship with Visual Studio.  No more, no less.   \r\n\r\nWe're simply not very interested in the non-OSS options.  We have too much at stake to risk our business logic on someone else's convenience.  We know they exist, and we have plenty of people in-house who are familiar with a variety of them (VB.NET, C#, etc. included).  It's just that we've made the conscious decision to retain control over our own codebase, and OSS lets us do that.  I'm not sure why you paint that as a \"religious\" decision when it was based solely on practical issues."
