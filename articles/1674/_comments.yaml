-
    name: 'Terry Hancock'
    mail: ''
    subject: 'Documentation strategies'
    hostname: 68.93.224.4
    created: '1153010940'
    body: "The pace of free software development is so fast that it is an impediment to use in itself. Isn't that a bizarre truth?!\r\n\r\nI'm an amateur on-again off-again developer, so I often find myself starting a project, stopping for awhile to work on other stuff, then coming back to it. But often, it's like Rip van Winkle waking up after the flag (and everything under it) has changed: the library I was depending on has gone through three major version changes, and the programming style I was using is \"passÃƒÂ©\": \"Oh, we've moved beyond 'interfaces', 'generic functions' are much better and clearer\". Ack! I can't keep up.\r\n\r\nWith documentation, mostly written by volunteers, this can be a serious problem: API documentation in particular is often out of date as a result.\r\n\r\nIn fact, the frequent complaint about lack of documentation for free software programs is usually inaccurate: most of the time there's plenty of documentation, but much of it is conflicting! Often there was an old, ugly way to solve a problem which was then replaced by a new easy way (which old-timers don't see any need to document, because it's so easy). So you wind up with smart new software and dumb old manuals.\r\n\r\nOn the other hand, the overriding concepts behind an application are usually pretty consistent even across major versions (MySQL is still going to be an SQL database, even if you've added 'transactions' or 'cursors' or whatever).\r\n\r\nSo one thing I've noticed some projects moving towards is increasing the use of automatic documentation tools: write the base document in as version-neutral a way as possible (so you don't have to constantly update it), then link into automatically generated documentation that is created from the source code comments.\r\n\r\nFor a translation effort this would help as well: there'd be less time pressure on the main manual document (because it's not changing so frequently), and the automatically-generated documentation is a much smaller project to translate). In fact, now that I think about it, I bet you could write a gettext-based system to use the old translated API with the new one so that you only have to translate the parts that have changed.\r\n\r\nI don't know, but it does seem like there are probably a number of technical and procedural improvements that could be made.\r\n"
-
    name: 'Aputsiaq Niels Janussen'
    mail: ''
    subject: 'Ambiguity and concepts without context kills the translator'
    hostname: 88.83.2.205
    created: '1153353658'
    body: "I can tell you that a good translation of a MySQL manual with two thousand pages written in a technical jargon would take of technical MySQL take several years to complete for users of a minor language (i.e. a language spoken by few forty thousand or so). At the time a Greenlandic version of the MySQL manual would come out, MySQL has perhaps reached version 8 or 10. :-)\r\n\r\nOne of the most obvious difficulties that users of minor languages run into is:\r\n(A) no equivalent set of the technical terminology, (B) very few translators that can accomplish the workload and they are perhaps geographically scattered and (C) few free software tools to assist the translators.\r\n\r\nWhat is needed often seemes to be a consistent terminology for the most important hundred or two hundreds concepts used in a larger manual. A terminology would at least include (1) the concept and (2) a definition of the concept. Some further features of a good terminology would include some examples of how to use the concept (i.e. the concepts usage and how not to use it). If the concept is very close related to a specific grapical user-interface the superior terminology could include a screendump and so on.\r\n\r\nIn order to get the job done, manual translation is necessary. Perhaps the tranlators capable of getting the job done lives in seperate parts of the world. Being able to translate through a browser with some sort of workflow-management could prove to be very helpful. \r\n\r\nSmall disconnected free software projects without coupling is doomed to require the same work getting done over and over again. Many hours of inefficient translation is done due to the lack of a common, well-defined English terminology. Translation of concepts without precise a definition is prone to contain errors. Translating one concept at a time or perhaps a peculiar sentence without a context is difficult. Some free software translators may have tried to use Pootle (http://pootle.wordforge.org)? Well, it's difficult to translate strings like \"%s to find blah blah\", when your translation has to fit into one string. No room to make the project manager aware of the ambiguities related to that string.\r\n\r\nMajor companies will use proprietary products like MultiTerm, TermStar or XTS to provide themselves and their customers with a consistent corporate terminology. They gain clarity in communication, a corporate image and saves themselves from a lot of misunderstandings and saves a lot of time.\r\n\r\nTo give an example: Translation of the headline Ã¢â‚¬?Manual translationÃ¢â‚¬? could refer to the tiresome labour of manually translating a string and/or it could refer to translation of (software?) manuals. Ambiguity is the root of all evil in translation."
