-
    name: jabjoe
    mail: ''
    subject: 'Not so simple'
    hostname: 193.119.19.210
    created: '1245757461'
    body: "What you want is called Zero Install http://0install.net/\r\n\r\nIt is used in Rox to copy RiscOSs Application Directory.\r\n\r\nhttp://en.wikipedia.org/wiki/Application_Directory\r\n\r\nHaving been a RiscOS user I can say this isn't a perfect system. Each application folder ends up with everything required to run the application, which sounds good, but isn't. \r\n\r\nLike all OSs, RiscOS loaded for a dll in the system first, then the local folder. But what if a dll of the same name but different version was in the system? BANG. So you must name the dlls differently, or load version info and select from that.\r\n\r\nSo if that's all working, you have multiple apps using different version of the dll all in memory. This is something I at least don't want to be the common case!\r\n\r\nYou want dynamic libs shared by many applications. Which yes means a dependency soup. That's why you need a package manager! (WHY DOES WINDOWS STILL NOT HAVE ONE)\r\n\r\nPerhaps for special cases, you could use the linux custom namespaces, you could knock something up that meant a user could install and run applications without admin. The applications are run in a namespace with the /usr,/etc,/lib,/bin folders unionfs with the user's and system's version. Or you make the split between user applications and system applications, and user applications run in this custom name space. But do you want this per user? I guess not. You want all users to be able install/uninstall/modify these apps. I guess not. Then don't you just end up with admin again?\r\n\r\n\r\n\r\nJoe"
-
    name: morris
    mail: ''
    subject: 'Why management is bad!'
    hostname: 201.3.184.55
    created: '1245760240'
    body: "Oh yeah! Let's strip the source code shipping requirement from the GPL too, it's too much a hassle to read all that code. Who needs to be creative?! Even better, who thinks can be creative?\r\n\r\nI also have a few improvements for this article:\r\n\r\n    * Users can not have root access, unless they ARE root; per-user installation is allowed in $HOME\r\n    * SOMETIMES, with SOME distros, it’s very tricky to install several versions of SOME _PACKAGES_ (while the same is not true for softwares).\r\n    * Users are not stuck with software installed system-wide, that's why I have ~/bin/ and even ~/local/bin/, doing so is as simple as exporting $PATH;\r\n    * Supported _packages_ usually are downloaded from the official repositories. Pre-compiled binaries for major distros USUALLY can be found on the project's website, testing usually is made using a public repository, and running `make` at $HOME;\r\n    * IN SOME CASES, especially when the user adds repositories or installs packages directly without relying on the package manager, the package manager it self is not capable of dependency-checking and users themselves end up with circular dependencies. Nasty Users!\r\n    * A PACKAGE (again, not true for software itself) is bound to a specific distribution, which assures it to work on that same distro, and SOMETIMES to a specific version of that distribution, what usually means easier support.\r\n    * It’s nontrivial to _give a package_ to a friend, just because giving it's name is easier, and even a simple tarball SOMETIMES is too (and it's possible on every single distro);\r\n\r\nI also recommend this article (http://mdzlog.alcor.net/2009/06/20/white-boy-test/) for updates, you are still stuck whit the _gandma_ thing, that's old!"
-
    name: bkor
    mail: ''
    subject: Blergh
    hostname: 194.151.13.225
    created: '1245760330'
    body: 'Time to cancel my FSM ''subscription''. From a magazine I expect research to be done, not articles like this... there are enough blogs to ignore.'
-
    name: mrak018
    mail: ''
    subject: 'It doesn''t broken. It is'
    hostname: 89.175.165.2
    created: '1245762634'
    body: "It doesn't broken. It is your brain that is broken, LameDuck. Didn't Linux Hater guy tell you enough to understand why you're wrong? \r\n\r\nYou simply want software installation in Mac OS X way, while it is done in Linux way. Both ways have their advantages and disadvantages. Both are fine. Why don't you just build a Mac-like software distribution system for Linux, if you need one? It is easy. Just go and make it. "
-
    name: 'Lopo Lencastre de Almeida'
    mail: ''
    subject: '«Users should be able to'
    hostname: 195.23.133.162
    created: '1245763989'
    body: "«Users should be able to install different versions of the same software immensely easily\"»\r\n\r\nI agree with Jabjoe. this could be really messy... \r\n\r\n... but on the other end I do have Swiftweasel and Firefox both running in the same machine and I had two different Firefox versions also running in the same machine and using parts of the same configuration, etc. It is tricky and implies tackling the configuration files your self but it is doable.\r\n\r\nAnd, usually, COMMON USERS should not have more than one stable and updated version of the software.\r\n\r\n«Users should be able to install software even without being root»\r\n\r\nI dn't know your Ubuntu but in mine there is a sudoers file and I don't have to be root... just need to have part of its rights."
-
    name: 'Tony Mobily'
    mail: ''
    subject: OK...
    hostname: 151.49.234.89
    created: '1245765226'
    body: "Hi,\r\n\r\nI can't comment on your desire not to read Free Software Magazine -- that's your choice.\r\n\r\nWell, I've been a GNU/Linux user for some 15 years, have been a programmer and have been installing GNU/Linux on clients' machines for *years*.\r\n\r\nI can only guess a lot of people out here haven't seen common user struggle with Ubuntu (one of the most user friendly ones) as much as I have.\r\n\r\nRegards,\r\n\r\nMerc."
-
    name: 'Tony Mobily'
    mail: ''
    subject: 'uh...?'
    hostname: 151.49.234.89
    created: '1245765752'
    body: "Hi,\r\n\r\n-----------\r\nOh yeah! Let's strip the source code shipping requirement from the GPL too, it's too much a hassle to read all that code. Who needs to be creative?! Even better, who thinks can be creative?\r\n-------------\r\n\r\nYou seem to be implying that with *current* package managers people get the source code when they install binaries... I think your point here is irrelevant.\r\n\r\n\r\n> I also have a few improvements for this article:\r\n\r\nI am all ears!\r\n\r\n--------------\r\n* Users can not have root access, unless they ARE root; per-user installation is allowed in $HOME\r\n--------------\r\n\r\nThis would make system-wide configuration hard. I don't think it's a good idea.\r\n\r\n-----------------\r\n* SOMETIMES, with SOME distros, it’s very tricky to install several versions of SOME _PACKAGES_ (while the same is not true for softwares).\r\n------------------\r\n\r\nI am not following you here.\r\n\r\n----------------------------\r\n* Users are not stuck with software installed system-wide, that's why I have ~/bin/ and even ~/local/bin/, doing so is as simple as exporting $PATH;\r\n-----------------------------\r\n\r\nCommon users don't know -- and shouldn't know -- what \"exporting $PATH\" means. Plus, I very very very much doubt people manage to install Firefox, Openoffice, Pidgin in $HOME/bin \r\n\r\n------------------\r\n* Supported _packages_ usually are downloaded from the official repositories. Pre-compiled binaries for major distros USUALLY can be found on the project's website, testing usually is made using a public repository, and running `make` at $HOME;\r\n-------------------\r\n\r\nI probably wasn't clear enough in the article... I was aiming at common users. At the moment some programs make binaries available, but they have to fight with rpms, debs, and then again different distros, and different versions of the same distro. That's just too hard. The article is about making this simplified.\r\n\r\n----------------------------------\r\n* IN SOME CASES, especially when the user adds repositories or installs packages directly without relying on the package manager, the package manager it self is not capable of dependency-checking and users themselves end up with circular dependencies. Nasty Users!\r\n-----------------------------------\r\n\r\nI assume you are being sarcastic. Note that users are sometimes _forced_ to add repositories and install extra packages. Try installing OpenOffice 3.x on Ubuntu 8.10...\r\n\r\n-----------------------\r\n* A PACKAGE (again, not true for software itself) is bound to a specific distribution, which assures it to work on that same distro, and SOMETIMES to a specific version of that distribution, what usually means easier support.\r\n-----------------------\r\n\r\nI assume you missed the part of the article where I specify that there should be a list of packages _cross_ distribution...\r\n\r\n----------------------------\r\n* It’s nontrivial to _give a package_ to a friend, just because giving it's name is easier, and even a simple tarball SOMETIMES is too (and it's possible on every single distro);\r\n-----------------------------\r\n\r\nIf by tarball you are referring to the source, then we are talking about two different audiences.\r\n\r\n------------------\r\nI also recommend this article (http://mdzlog.alcor.net/2009/06/20/white-boy-test/) for updates, you are still stuck whit the _gandma_ thing, that's old!\r\n-------------------\r\n\r\nI won't comment on that article.\r\n\r\nThank you!\r\n\r\nMerc."
-
    name: 'Tony Mobily'
    mail: ''
    subject: 'Please don''t be offensive'
    hostname: 151.49.234.89
    created: '1245766020'
    body: "> It doesn't broken. It is your brain that is broken, LameDuck.\r\n\r\nYou are being offensive. I have to ask you to please avoid attacking people like this on your web site. I don't mind being attacked myself -- my skin is definitely thick enough. But, please avoid it if at all possible.\r\n\r\n>  Didn't Linux Hater guy tell you enough to understand why you're wrong?\r\n\r\nI am not very familiar with the Linux Hater guy. However, I based my experience as a programmer, user and advocate as a basis of my opinions and suggestions.\r\n\r\n--------------\r\nYou simply want software installation in Mac OS X way, while it is done in Linux way.\r\n--------------\r\n\r\nThat's correct.\r\n\r\n\r\n> Both ways have their advantages and disadvantages. \r\n\r\nMy (humble) point is that the current disadvantage GNU/Linux is suffering are too many -- and that the disadvantages OS X has are possible to overcome.\r\n\r\n> Both are fine. \r\n\r\nI disagree on this one.\r\n\r\n--------------\r\nWhy don't you just build a Mac-like software distribution system for Linux, if you need one? It is easy. Just go and make it.\r\n---------------\r\n\r\nI have build a lot of software in my life -- I maintain 50000 lines of code in Drupal (User Karma, Drigg, Friend List, Extra Voting Forms) and can tell you, with an open heart, that something like this is *anything but* easy. It requires interaction between distro, and some technical trickery.\r\n\r\nPlease don't be offensive in your comments.\r\n\r\nBye!\r\n\r\nMerc."
-
    name: 'Tony Mobily'
    mail: ''
    subject: 'Let''s see Lopo :-D'
    hostname: 151.49.234.89
    created: '1245766234'
    body: "Hi,\r\n\r\n----------------\r\n... but on the other end I do have Swiftweasel and Firefox both running in the same machine and I had two different Firefox versions also running in the same machine and using parts of the same configuration, etc. It is tricky and implies tackling the configuration files your self but it is doable.\r\n------------------\r\n\r\nMost users would find this impossible...\r\n\r\n------------------\r\nAnd, usually, COMMON USERS should not have more than one stable and updated version of the software.\r\n------------------\r\n\r\n...? There are some cases where different versions of the same software are important. A graphic designer will want several versions of Firefox. \r\n\r\n-----------------------------\r\nI dn't know your Ubuntu but in mine there is a sudoers file and I don't have to be root... just need to have part of its rights.\r\n----------------------------\r\n\r\nBecoming root *is* like being root. I was talking about installing software in the users' home directories...\r\n\r\nMerc.\r\n"
-
    name: 'Lopo Lencastre de Almeida'
    mail: ''
    subject: 'No! It is not!'
    hostname: 195.23.133.162
    created: '1245766246'
    body: "«However, using the same philosophy — and therefore architecture — for end-user software is just too limiting. My point list above is not “a list of unfortunate drawbacks”. <strong>It’s one of the major reasons why GNU/Linux hasn’t achieved mass penetration in the desktop arena</strong>.»\r\n\r\nSorry, Tony, to disagree with this.\r\n\r\nThe major reasons are:\r\n\r\n<ol>\r\n<li>Lack of support for the most popular games running real well</li>\r\n<li>Lack of a real promotion of an easy development language for common apps</li>\r\n<li>Lack of lobbying (with money/goods/other rolling) with some governments to push it to schools</li>\r\n</ol>\r\n\r\nOn 1. I have several kids around here that won't use Linux due to its lack of capability to play the games they want without too much fuss. \r\nI know that there is Wine and I know that there is Cedega (which costs €25 / half year)... the first is a pain to make some games barely playable and the second costs money... and they don't want to pay for the game and for something that they don't need to have if playing on MS Windows.\r\n\r\nOn 2. I can say for my experience -- because I'm that old -- that the real boost that MS Windows had was thanks to Visual Basic 2 and mostly thanks to Visual Basic 3, that allowed the conversion of thousands of MS Access / Clipper apps into real graphical software apps and allowed developers with little experience in developing real graphic interfaces to port their programs to MS Windows. Visual C come latter in time to fight Borland C and Borland Delphi was the last RAD tool I used before moving away from Microsoft.\r\nYou have several around Linux but, on my view, only Gambas could win hearts and that is not the one you see promoted. Canonical Ubuntu pushes Python, Novell SuSE pushes Mono and so on... but none of those are real graphical RAD tools.\r\n\r\nOn 3. we can see what happens in most countries were Microsoft wants to be the one (http://ur1.ca/6591) and that is not only in under development countries.\r\n\r\nThose are the most important. The rest, I think, although important are cosmetic for the common user. My mother and my nefews don't really care where the software is really installed."
-
    name: 'Tony Mobily'
    mail: ''
    subject: 'From an email...'
    hostname: 151.49.234.89
    created: '1245766645'
    body: "Hi,\r\n\r\nReceived by email, reproduced with permission of Ian:\r\n\r\n> The story should be very simple:\r\n>\r\n> * Users should be able to install software even without being root\r\n\r\nShould they be free to install viruses as well ;-)\r\n\r\n> * Users should be able to install different versions of the same software immensely easily\r\n> * Users should be able to run either their own version of the software, or the one installed on the system (if any)\r\n> * It should be possible to download and install software even though it doesn't come from an official repository\r\n> * Software just needs to work -- unchanged -- even if it's a bit old and it's run on a newer distribution\r\n> * It should be possible to \"give\" a piece of software to a friend by simply dragging an icon onto a memory stick\r\n\r\nAcorn had this well supported using application directories in RISC OS.\r\nDrag !app to any position in the Filesystem and it knew where it was and where libraries etc were that it might need. Each directory had scope for a custom script, application icon and program + supporting\r\nresources. Shared libraries and system resources used more generally in !System !fonts or other shared repositories. Delete the applications directory and the app is uninstalled. Big downside is that the app could\r\nbe a virus or contain a virus.\r\n\r\n> However, using the same philosophy -- and therefore architecture --\r\n> for end-user software is just too limiting. My point list above is not\r\n> \"a list of unfortunate drawbacks\". It's one of the major reasons why\r\n> GNU/Linux hasn't achieved mass penetration in the desktop arena.\r\n\r\nNot really, the main reason is that it hasn't hundreds of billions of marketing budget backing it and until recently key applications were not available on the Linux platform, most of the user training is on the Windows GUI etc. I think that is still an issue but getting easier. For most end users having an on-line add/remove as with Ubuntu is a major improvement over massing about with CDs and DVDs (not to mention malware). How many PC apps can I simply copy to a USB stick and distribute without installshield and worrying about which DLLs are or\r\nare not present etc? Not many in my experience.\r\n\r\n\r\n> There are also many, many \"blueprint\" drafts in Ubuntu's launchpad.\r\n> There are so many in fact that you will get lost reading them. A lot\r\n> of them talk about a simplified directory structure for the system,\r\n> which as a _consequence_ would imply simplified software installation.\r\n\r\nSimplifying the directory structure and making it more obvious and consistent what goes where is a good idea but I don't think it is primarily about end users installing software. More making it easier for techs and system support managers to transition from Windows and manage\r\nsystems quickly and effectively.\r\n\r\n> . This would mean that newer\r\n> applications would have the potential to work on four year-old\r\n> systems.\r\n\r\nSounds reasonable especially as systems mature.\r\n\r\n\r\n> The directory could have the extension `.apx` and have a file called\r\n> `application.xml` in it.\r\n\r\nSounds very like the Acorn Risc OS approach.\r\n\r\n> I have a dream. A dream of a world where people distribute\r\n> applications as bundled directories,\r\n\r\nIf you were in a UK school in the early 90s you probably had this on a\r\nRisc PC or A3000 :-)\r\n\r\n\r\n> I wonder if I will ever see this in GNU/Linux?.\r\n\r\nI still think virus proliferation would be a significant problem to solve with such a system. However, rationalising the architecture of the file system is a worthy goal irrespective of its relevance to installing\r\napplications.\r\n\r\nIan"
-
    name: 'Tony Mobily'
    mail: ''
    subject: 'Good points'
    hostname: 151.49.234.89
    created: '1245766739'
    body: ">> * Users should be able to install software even without being root\r\n>\r\n> Should they be free to install viruses as well ;-)\r\n\r\n\"Digital signatures\".\r\nApplication developers should have the freedom to only install applications digitally signed by a trusted source (the distro) or NOT.\r\n\r\nAnd... let's not get into what users end up doing when a piece of software isn't the the main repository -- except, they end up installing untrusted software as _root)...\r\n\r\n> Acorn had this well supported using application directories in RISC OS.\r\n> Drag !app to any position in the Filesystem and it knew where it was and\r\n> where libraries etc were that it might need. Each directory had scope\r\n> for a custom script, application icon and program + supporting\r\n> resources. Shared libraries and system resources used more generally\r\n> in !System !fonts or other shared repositories. Delete the applications\r\n> directory and the app is uninstalled. Big downside is that the app could\r\n> be a virus or contain a virus.\r\n\r\nSee above about viruses...\r\n\r\n>> However, using the same philosophy -- and therefore architecture --\r\n>> for end-user software is just too limiting. My point list above is not\r\n>> \"a list of unfortunate drawbacks\". It's one of the major reasons why\r\n>> GNU/Linux hasn't achieved mass penetration in the desktop arena.\r\n>\r\n> Not really, the main reason is that it hasn't hundreds of billions of\r\n> marketing budget backing it and until recently key applications were not\r\n> available on the Linux platform, most of the user training is on the\r\n> Windows GUI etc.\r\n\r\nI disagree on this one... but hey.\r\n\r\n> I think that is still an issue but getting easier. For\r\n> most end users having an on-line add/remove as with Ubuntu is a major\r\n> improvement over massing about with CDs and DVDs (not to mention\r\n> malware). How many PC apps can I simply copy to a USB stick and\r\n> distribute without installshield and worrying about which DLLs are or\r\n> are not present etc? Not many in my experience.\r\n\r\nNone in my experience -- I was referring to Mac, not Windows...\r\n\r\n>> In terms of what's been said, there are several discussions about this\r\n>> in Ubuntu and Debian. A good start is the [Rename Top Directory\r\n>> Names][http://brainstorm.ubuntu.com/idea/6243/) in Ubuntu. This link\r\n>> has a _long_ list of duplicates.\r\n>> There are also many, many \"blueprint\" drafts in Ubuntu's launchpad.\r\n>> There are so many in fact that you will get lost reading them. A lot\r\n>> of them talk about a simplified directory structure for the system,\r\n>> which as a _consequence_ would imply simplified software installation.\r\n>\r\n> Simplifying the directory structure and making it more obvious and\r\n> consistent what goes where is a good idea but I don't think it is\r\n> primarily about end users installing software. More making it easier for\r\n> techs and system support managers to transition from Windows and manage\r\n> systems quickly and effectively.\r\n\r\nI wrote this from an OS X perspective... rather than windows.\r\nI think the directory structure can stay as it is because it shouldn't\r\neven matter...\r\n\r\n[...]\r\n>> The directory could have the extension `.apx` and have a file called\r\n>> `application.xml` in it.\r\n>\r\n> Sounds very like the Acorn Risc OS approach.\r\n\r\nI wish I had seen it...\r\n\r\n>> I have a dream. A dream of a world where people distribute\r\n>> applications as bundled directories,\r\n>\r\n> If you were in a UK school in the early 90s you probably had this on a\r\n> Risc PC or A3000 :-)\r\n\r\nAAAHHHHHHHH :-D\r\n\r\n>> I wonder if I will ever see this in GNU/Linux?.\r\n>\r\n> I still think virus proliferation would be a significant problem to\r\n> solve with such a system. However, rationalising the architecture of the\r\n> file system is a worthy goal irrespective of its relevance to installing\r\n> applications.\r\n\r\nThat's not quite my point of view... but it's a point of view :-D\r\n\r\n\r\nMerc."
-
    name: 'Tony Mobily'
    mail: ''
    subject: 'My view...'
    hostname: 151.49.234.89
    created: '1245767280'
    body: "-----------------\r\n«However, using the same philosophy — and therefore architecture — for end-user software is just too limiting. My point list above is not “a list of unfortunate drawbacks”. It’s one of the major reasons why GNU/Linux hasn’t achieved mass penetration in the desktop arena.»\r\n\r\nSorry, Tony, to disagree with this.\r\n--------------------\r\n\r\nNo problem at all :-D\r\n\r\n> The major reasons are:\r\n> 1. Lack of support for the most popular games running real well\r\n\r\nOK. So, you are a game developer and want to release it. Do you release it as a deb package? Or RPM? For Ubuntu 8.04? Or Ubuntu 8.10? Or maybe Fedora 9? Fedora 10? Or Debian? Or...?\r\n\r\n>   2. Lack of a real promotion of an easy development language for common apps\r\n\r\nI don't see this as a major problem, but I might well be wrong...\r\n\r\n>    3. Lack of lobbying (with money/goods/other rolling) with some governments to push it to schools\r\n\r\nI agree!\r\n\r\n---------------------\r\nThose are the most important. The rest, I think, although important are cosmetic for the common user. My mother and my nefews don't really care where the software is really installed.\r\n----------------------\r\n\r\nI think users have a sense of being highly empowered when applications are containers and they decide where it is, or who they give it to. That, plus all of the PROs I listed in the article :-D\r\n\r\nMerc."
-
    name: 'Tony Mobily'
    mail: ''
    subject: 'Interesting article'
    hostname: 151.49.234.89
    created: '1245767335'
    body: "(Received by Brian and republished with his permission)\r\n\r\nInteresting article.\r\n\r\nYour description of \"a new list every two years\" is effectively what every Linux vendor all ready does with long term support releases.   You might want to also consider Gentoo's notion of \"slots\" which allows multiple versions of libraries and compilers to exist gracefully next to each other for use by other software.\r\n\r\nYour dream is not hard technically.  It requires statically linking the program, and results in a very large binary, or distributing required libraries with the program, and the correct relative path to get to the libraries, and results in a lot of duplication of files.\r\nOne solution to the duplication problem is to use a deduplication routine to automagically hard-link duplicate library files.  This then adds the added complication that the file can't be deleted while *any* (hard or symbolic) link still exists.\r\n\r\nFor user-space applications, some methods like this might make sense.\r\n"
-
    name: edeion
    mail: ''
    subject: 'As for me, I found your'
    hostname: 128.93.1.81
    created: '1245769555'
    body: "As for me, I found your article interesting and promising.\r\n\r\nI guess system wide install of what you call \"user software\" has also some advantages such as:\r\n- decreasing disk space loss\r\n- factoring the updates\r\n- making generic software available by default (which is still better for hopeless users)\r\n\r\nAnd this is not true only for huge servers: even on a family computer, more technical users may be asked to manage software updates (and so) for the whole family.\r\n\r\nHowever, you're right: it's quite frustrating to have pain installing (say) a plain emacs when you are not root. And this happens especially on servers. Some software pieces could be installed per user even with a package manager.\r\n\r\nI would have liked to provide a more in depth comment but I don't manage to concentrate."
-
    name: 'Tony Mobily'
    mail: ''
    subject: 'Let''s see...'
    hostname: 151.49.234.89
    created: '1245773280'
    body: "Hi,\r\n\r\n> As for me, I found your article interesting and promising.\r\n\r\nThanks :-D\r\n\r\n--------------\r\nI guess system wide install of what you call \"user software\" has also some advantages such as:\r\n- decreasing disk space loss\r\n---------------\r\n\r\nProbably true. But... we are talking about very negligible space here.\r\n\r\n> - factoring the updates\r\n\r\nSee one of the points -- the system knows where each application is, and can therefore do updates\r\n\r\n> - making generic software available by default (which is still better for hopeless users)\r\n\r\nNot following you.\r\n\r\n-------------------\r\nAnd this is not true only for huge servers: even on a family computer, more technical users may be asked to manage software updates (and so) for the whole family.\r\n--------------------\r\n\r\nThat's when you get the applications in a \"system-wide\" folder. \r\n\r\n----------------------\r\nHowever, you're right: it's quite frustrating to have pain installing (say) a plain emacs when you are not root. And this happens especially on servers. Some software pieces could be installed per user even with a package manager.\r\n-------------------\r\n\r\nYep.\r\n\r\n--------------\r\nI would have liked to provide a more in depth comment but I don't manage to concentrate.\r\n---------------\r\n\r\nThat's quite alright :-D\r\n\r\nMerc.\r\n\r\n"
-
    name: NilsR
    mail: ''
    subject: 'Maybe a type of virtualization?'
    hostname: 193.157.227.77
    created: '1245778542'
    body: "Interesting post, too bad you felt you had to go negative (to be heard?) There's always ways to improve any kind of software, but the flip side of that coin is that everything is forever more or less \"broken\".\r\n\r\nWhat I think would be a cool solution to at least some of your issues, would be to add a virtual layer on top of the regular system. The bottom interface of this layer would relate to the file-system as it is. The top interface would show the application only what it needs, a virtual copy of the file-system, made exclusively for that app. No need to actually have more than one copy of (each version of) the libraries, the virtual layer would take care of serving each app with the library version it is built with.\r\n\r\nI suspect this is done already in many situations, Wine using \"Bottles\" and chroot jails are probably worth looking into for lessons learned. I'm sure others could find many more examples. The hardest part would most likely be to automate it and make it as easy, user-friendly and stable as possible.\r\n"
-
    name: code.guru
    mail: ''
    subject: 'This Is Great!!!'
    hostname: 76.246.253.141
    created: '1245779166'
    body: "This is a great article, and controversial too :P \r\n\r\nI totally agree with Tony on this one, Linux is waaaaaay to hard for people like my mom. If we were to make it like 30% easier, I bet people would flock to it in truckloads :D\r\n\r\nEverything Tony said was correct and great, as a programmer myself, I thought I might add these suggestions:\r\n\r\n1. Make installing programs like Windows. You download an .EXE, run it, click Next a few times and you're done\r\n2. Rewrite some of the Linux Kernel in C++ to make it more OOP; or make later modifications in that Language\r\n3. Make the kernel have a well structured API, that way developers can worry less about all that system stuff; if they want to make a new dir, they should be allowed to call a makedir(); function, right?\r\n\r\nHope you liked my suggestions\r\n~ mike\r\n   \r\n\r\n----\r\nPlease Visit My Blog:\r\nhttp://shallweprogram.blogspot.com/"
-
    name: northofnowhere
    mail: ''
    subject: 'Hope this gets some support'
    hostname: 206.248.164.223
    created: '1245808136'
    body: "You are a brave man. Every time this subject is broached, the author can expect a large number of responses of the \"it works for me, so why change\" variety. (And those are the nice ones!)\r\n\r\nI agree entirely with your analysis - software installation is broken because it's stuck in the Unix server timewarp, and this \"little\" problem is indeed the major reason for Linux's anaemic adoption rate. The effects permeate throughout the software creation process, marketing (or lack thereof) of Linux systems, and end user support. It's what condemns Linux to a microscopic share.\r\n\r\nYour proposed steps to solution are a good start. I particularly agree that there must be a recognized cross-distribution system base, with regular updates, and applications added on top in their own directories.\r\n\r\nGobo is not the only effort in this direction. One that's taken an approach nearer to your ideal is PC-BSD, which consists of self-sufficient applications installed on top of a FreeBSD base, and allows most of the things you call for, eg multiple versions of the same application.\r\n\r\nI also agree that the only way something like this is going to get any traction is if there is a major sponsor. But is there a company/organization brave enough to get behind something different, when what we've tried up to now hasn't worked? In some ways, the free software community is very conservative."
-
    name: 'Tony Mobily'
    mail: ''
    subject: 'Nice one!'
    hostname: 151.49.234.18
    created: '1245830760'
    body: "Hi,\r\n\r\n---------------\r\nYou are a brave man. Every time this subject is broached, the author can expect a large number of responses of the \"it works for me, so why change\" variety. (And those are the nice ones!)\r\n---------------\r\n\r\nYeah... we have a variety of those in this very article :-D\r\nBut, thank you so much for the PC-BSD link! You are right, they are very close to doing exactly what I proposed.\r\n\r\nThere are things I don't quite agree with (for example, the need to have an \"install\" procedure...) but it's really remarkable!\r\n\r\nMerc."
-
    name: 'Tony Mobily'
    mail: ''
    subject: '> Interesting post, too bad'
    hostname: 151.49.234.18
    created: '1245831300'
    body: "> Interesting post, too bad you felt you had to go negative (to be heard?) \r\n\r\nI didn't think it was negative... I wasn't \"emotional\" or anything. I just listed all of the drawbacks of the current installation methods and explained why I thought they were show-stoppers...\r\n\r\n----------------------\r\nThere's always ways to improve any kind of software, but the flip side of that coin is that everything is forever more or less \"broken\".\r\n---------------------\r\n\r\nYep. And then somebody says \"it's broken!\" :-D\r\n\r\n-----------------------\r\nWhat I think would be a cool solution to at least some of your issues, would be to add a virtual layer on top of the regular system. The bottom interface of this layer would relate to the file-system as it is. The top interface would show the application only what it needs, a virtual copy of the file-system, made exclusively for that app. No need to actually have more than one copy of (each version of) the libraries, the virtual layer would take care of serving each app with the library version it is built with.\r\n----------------------------\r\n\r\nThis is an interesting idea. But... why would you go that far? What clear advantages would there be, compared to adding the directory's own \"lib\" directory to the LD_LIBRARY_PATH var?\r\n\r\nMerc."
-
    name: 'Tony Mobily User'
    mail: ''
    subject: 'Let''s see...'
    hostname: 151.49.234.18
    created: '1245831339'
    body: "> This is a great article, and controversial too :P\r\n\r\nYep... it was a bit.\r\n\r\n-------------------\r\nI totally agree with Tony on this one, Linux is waaaaaay to hard for people like my mom. If we were to make it like 30% easier, I bet people would flock to it in truckloads :D\r\n--------------------\r\n\r\nWe can only hope!\r\n\r\n\r\n-------------\r\nEverything Tony said was correct and great, as a programmer myself, I thought I might add these suggestions:\r\n-----------------\r\n\r\n----------\r\n1. Make installing programs like Windows. You download an .EXE, run it, click Next a few times and you're done\r\n-----------\r\n\r\nWell this is actually exactly what my piece was against... software installation should be a matter of copying the application over!\r\n\r\n---------------------\r\n2. Rewrite some of the Linux Kernel in C++ to make it more OOP; or make later modifications in that Language\r\n----------------------\r\n\r\nHave you seen the Linux kernel's code...?\r\nI don't think this would be possible, to be honest.\r\n\r\n--------------------\r\n3. Make the kernel have a well structured API, that way developers can worry less about all that system stuff; if they want to make a new dir, they should be allowed to call a makedir(); function, right?\r\n------------------------\r\n\r\nLost you here... \"mkdir\" *is* a current Linux system call -- in fact, it's part of the POSIX standard?\r\n\r\nMerc.\r\n"
-
    name: 'Tony Mobily User'
    mail: ''
    subject: 'Let''s see...'
    hostname: 151.49.234.18
    created: '1245831441'
    body: "> This is a great article, and controversial too :P\r\n\r\nYep... it was a bit.\r\n\r\n-------------------\r\nI totally agree with Tony on this one, Linux is waaaaaay to hard for people like my mom. If we were to make it like 30% easier, I bet people would flock to it in truckloads :D\r\n--------------------\r\n\r\nWe can only hope!\r\n\r\n\r\n-------------\r\nEverything Tony said was correct and great, as a programmer myself, I thought I might add these suggestions:\r\n-----------------\r\n\r\n----------\r\n1. Make installing programs like Windows. You download an .EXE, run it, click Next a few times and you're done\r\n-----------\r\n\r\nWell this is actually exactly what my piece was against... software installation should be a matter of copying the application over!\r\n\r\n---------------------\r\n2. Rewrite some of the Linux Kernel in C++ to make it more OOP; or make later modifications in that Language\r\n----------------------\r\n\r\nHave you seen the Linux kernel's code...?\r\nI don't think this would be possible, to be honest.\r\n\r\n--------------------\r\n3. Make the kernel have a well structured API, that way developers can worry less about all that system stuff; if they want to make a new dir, they should be allowed to call a makedir(); function, right?\r\n------------------------\r\n\r\nLost you here... \"mkdir\" *is* a current Linux system call -- in fact, it's part of the POSIX standard?\r\n\r\nMerc.\r\n"
-
    name: jabjoe
    mail: ''
    subject: 'I meant to meantion this too'
    hostname: 193.119.19.210
    created: '1245836588'
    body: ">> There should be a comprehensive list of libraries, and versions, expected to be available with the operating system. \r\n\r\nIsn't this what the Linux Standard Base is about?\r\nYou develop to that. Yes you might need to package it in a few different repository types (deb and rpm), but competition is good, you wouldn't want one repository type to rule them all, or you missed the point of free software's competing ecosystem of interchangeable parts.\r\n\r\nWith not mentioning \"Zero Install\", \"Super OS\" (with its Portable Applications) or the Linux Standard Base, I'm wondering if you did your research, or if this is just a rant. \r\n\r\nI don't want the system you advocate because I feel shared components are very important for a number of reasons, and that always leads to where we are now. I don't want any Tom, Dick or Harry to be able install, uninstall applications, which leads to restricted rights, which leads to admin, which leads to where we are now. It is currently possible to install multiple versions of the same software, firefox 3 and 3.5 are both in the ubuntu repository and work on the same machine just fine, and yes, sometimes, when outside the repository, setting up multiple version on the same machine to run is \"advanced\" but that's ok, because it's not the common case, when it is, like with firefox, both versions are made to work together and put in a repository, which is where we are now.\r\n\r\nWhat we have now evolved to where it is, and for my money, is working rather well. But by all means, install \"Super OS\" or a distro with \"Zero Install\" instead of package management, from what you are saying you want, I think these might fit you.\r\n\r\n"
-
    name: 'Tony Mobily'
    mail: ''
    subject: 'Hi, >> There should be a'
    hostname: 151.49.234.18
    created: '1245837960'
    body: "Hi,\r\n\r\n>> There should be a comprehensive list of libraries, and versions, expected to be available with the operating system.\r\n\r\n>Isn't this what the Linux Standard Base is about?\r\n\r\nNo it's not. From http://www.ibm.com/developerworks/library/l-lsb.html :\r\n\r\nIn general, applications have the potential to become LSB compliant if they can limit themselves to using only these 14 system libraries: libc, libdl, libm, libutil, libcrypt, libz, libpthread, libncurses, libX11, libXext, LibXt, libICE, libSM, and libGL.\r\n\r\nSee the word *comprehensive*.\r\n\r\n> You develop to that.\r\n\r\nYou are a _little_ restricted. The list above is not comprehensive enough.\r\n\r\n>  Yes you might need to package it in a few different repository types (deb and rpm), but competition is good, you wouldn't want one repository type to rule them all, or you missed the point of free software's competing ecosystem of interchangeable parts.\r\n\r\nYou could write a much more comprehensive list of libraries (which would include Gnome and KDE) but you are stuck with the following problems:\r\n\r\n    * Users need to have root access in order to install a piece of software; no per-user installation is allowed\r\n    * It’s very tricky to install several versions of the same piece of software. Just think of the poor graphic designer who needs to install several versions of Opera and Firefox;\r\n    * Users are stuck with the piece of software installed system-wide;\r\n    * The software needs to be downloaded from the official repositories. Well, it doesn’t need to, but an average user wants to stay well away from unofficial repositories for technical reasons;\r\n    * In some cases (especially when the user adds repositories or installs packages directly), the dependency-checking mechanism often fails and users end up with circular dependencies. They are nasty;\r\n    * A piece of software is bound to a specific distribution, and — what’s worse — to a specific version of that distribution too. It’s not trivial to install Openoffice 3.1 on Ubuntu 8.10. You can argue that you can install the bunch of .deb packages from OpenOffice’s web site. Tell that to your grandmother or your average inexperienced computer user.\r\n    * It’s not trivial to “give” a program to a friend. To the end user, giving a program to a friend should be as simple as dragging an icon onto a memory stick; instead, files are scattered all over the system.\r\n\r\n----------------\r\nWith not mentioning \"Zero Install\", \"Super OS\" (with its Portable Applications) or the Linux Standard Base, I'm wondering if you did your research, or if this is just a rant.\r\n------------------\r\n\r\nI have Zero Install installed in my system. I studied it inside out. Zero Install does _not_ solve all of the problems I list above. Did you see the contents of the \"Application directory\" created by ZeroInstall? It goes against the \"transparency\" principle my proposed idea tries to work towards.\r\n\r\nFor SuperOS's \"RUNZ\" system, it's still under development and I wasn't aware of it. It _seems_ promising -- and so is PC-BSD's system.\r\n\r\nI consider a \"rant\" a piece that just complains about things. In my piece, I pointed out a problem, explained why it was a problem, and offered a possible solution.\r\n\r\nTo me, that's not a rant.\r\n\r\n--------------\r\nI don't want the system you advocate because I feel shared components are very important for a number of reasons, and that always leads to where we are now. I don't want any Tom, Dick or Harry to be able install, uninstall applications, which leads to restricted rights, which leads to admin, which leads to where we are now. \r\n-----------------\r\n\r\nAre you saying that you think people should mount their home directory with the \"x\" flag disabled?\r\nI am asking because _right now_ GNU/Linux allows you to install applications in their own home directory -- it's just hard to do so.\r\n\r\n-------------------\r\nIt is currently possible to install multiple versions of the same software, firefox 3 and 3.5 are both in the ubuntu repository and work on the same machine just fine, and yes, sometimes, when outside the repository, setting up multiple version on the same machine to run is \"advanced\" but that's ok, because it's not the common case, when it is, like with firefox, both versions are made to work together and put in a repository, which is where we are now.\r\n----------------------\r\n\r\nI disagree with this point, but we will need to agree to disagree.\r\n\r\n---------------------\r\nWhat we have now evolved to where it is, and for my money, is working rather well. But by all means, install \"Super OS\" or a distro with \"Zero Install\" instead of package management, from what you are saying you want, I think these might fit you.\r\n------------------------\r\n\r\nZero Install doesn't. Super OS is promising. We shall see.\r\n\r\nMerc."
-
    name: 'Tony Mobily'
    mail: ''
    subject: Reply
    hostname: 151.49.234.18
    created: '1245838477'
    body: "Hi,\r\n\r\nI had already replied to this comment, but must have forgotten to submit it after previewing it...\r\n\r\n-----------------\r\nWhat you want is called Zero Install http://0install.net/\r\n\r\nIt is used in Rox to copy RiscOSs Application Directory.\r\n\r\nhttp://en.wikipedia.org/wiki/Application_Directory\r\n-------------------\r\n\r\nSee my other comment on Zero Install in my other answer.\r\n\r\n\r\n-------------\r\nSo if that's all working, you have multiple apps using different version of the dll all in memory. This is something I at least don't want to be the common case!\r\n\r\nYou want dynamic libs shared by many applications. Which yes means a dependency soup. That's why you need a package manager! (WHY DOES WINDOWS STILL NOT HAVE ONE)\r\n---------------\r\n\r\nDid you actually read my article...?\r\nThis is precisely why I propose a set of common, guaranteed libraries that can be expected.\r\nSo, a program would only have extra ones, or theo nes that are not \"guaranteed\".\r\n\r\n-----------------\r\nPerhaps for special cases, you could use the linux custom namespaces, you could knock something up that meant a user could install and run applications without admin. The applications are run in a namespace with the /usr,/etc,/lib,/bin folders unionfs with the user's and system's version. Or you make the split between user applications and system applications, and user applications run in this custom name space. \r\n-------------------\r\n\r\nThis goes against the important principle in my article, \"One application per folder\"\r\n\r\n----------------\r\nBut do you want this per user? I guess not. You want all users to be able install/uninstall/modify these apps. I guess not. Then don't you just end up with admin again?\r\n-----------------\r\n\r\nI don't get it. What's stopping people from doing that _today_? If you are saying that you don't want users to execute applications _at all_, then that's a different issue -- something I suspect you will get _very little_ support for...\r\n\r\nMerc."
-
    name: jabjoe
    mail: ''
    subject: 'Zero Install I''ll cover in'
    hostname: 193.119.19.210
    created: '1245847358'
    body: "Zero Install I'll cover in the other thread.\r\n\r\nI read your article, well more precisely I listen to it as I worked. ;-)\r\n\r\nNo matter how wide you guaranteed lib list is, people we want to use libs not in it. You want a system where applications that use the same lib, use the same file for that lib. Even if you did have a system with every possible lib installed on just in case, do you want that?\r\n\r\nThe custom namespace could work how ever is required, you could make a existing application adhere to \"One application per folder\", but I admit it's a hack.\r\n\r\nOf course I want users to execute applications. I can't see how you thought I meant that. I'll try to be clearer.\r\n\r\nYou don't want each user to have their own copy of the app, very few apps are users going to need their own copy. So you want a system of shared applications. So who decides what is installed or not? One user could uninstall another's app. So you end up with permissions.\r\n"
-
    name: 'Tony Mobily'
    mail: ''
    subject: Hi
    hostname: 151.49.234.18
    created: '1245848166'
    body: "Hi,\r\n\r\n> Zero Install I'll cover in the other thread.\r\n\r\nOK\r\n\r\n> I read your article, well more precisely I listen to it as I worked. ;-)\r\n\r\n:-D\r\n\r\n--------------------------\r\nNo matter how wide you guaranteed lib list is, people we want to use libs not in it. You want a system where applications that use the same lib, use the same file for that lib. Even if you did have a system with every possible lib installed on just in case, do you want that?\r\n----------------------------\r\n\r\nI wrote this in the article... you write a comprehensive list of libraries that you use as a \"base\" system, and then if a program requires more libraries, it would have them in its own lib directory. If those extra libraries are installed with the system already, the system-wide ones will be found beforehand.\r\n\r\n------------\r\nYou don't want each user to have their own copy of the app, very few apps are users going to need their own copy. So you want a system of shared applications. So who decides what is installed or not? One user could uninstall another's app. So you end up with permissions.\r\n------------\r\n\r\n...? Just have a shared \"application\" folder system-wide, available to all users. Only users with administration access will be able to copy apps in that folder.\r\n\r\nThis really is the least of the problems.\r\n\r\nMerc."
-
    name: 'Tony Mobily'
    mail: ''
    subject: Hi
    hostname: 151.49.234.18
    created: '1245848301'
    body: "Hi,\r\n\r\n> Zero Install I'll cover in the other thread.\r\n\r\nOK\r\n\r\n> I read your article, well more precisely I listen to it as I worked. ;-)\r\n\r\n:-D\r\n\r\n--------------------------\r\nNo matter how wide you guaranteed lib list is, people we want to use libs not in it. You want a system where applications that use the same lib, use the same file for that lib. Even if you did have a system with every possible lib installed on just in case, do you want that?\r\n----------------------------\r\n\r\nI wrote this in the article... you write a comprehensive list of libraries that you use as a \"base\" system, and then if a program requires more libraries, it would have them in its own lib directory. If those extra libraries are installed with the system already, the system-wide ones will be found beforehand.\r\n\r\n------------\r\nYou don't want each user to have their own copy of the app, very few apps are users going to need their own copy. So you want a system of shared applications. So who decides what is installed or not? One user could uninstall another's app. So you end up with permissions.\r\n------------\r\n\r\n...? Just have a shared \"application\" folder system-wide, available to all users. Only users with administration access will be able to copy apps in that folder.\r\n\r\nThis really is the least of the problems.\r\n\r\nMerc."
-
    name: jabjoe
    mail: ''
    subject: 'I''m sure the standard libs'
    hostname: 193.119.19.210
    created: '1245849934'
    body: "I'm sure the standard libs in the LSB will expand. For additional libs the current policy is you should statically link it. The point is, the LSB is at least the start of what you are asking for, so you should have mentioned it.\r\n\r\n-------------------\r\nUsers installing applications:\r\n-------------------\r\nThere are a collection of systems that can be put in place already for the odd application that needs to be per user not system wide. If it's system wide, as most of them will be, you want permissions on who does what, which is what we have now.\r\n\r\n-------------------\r\nIt’s very tricky to install several versions of the same piece of software.:\r\n-------------------\r\nThought you wanted to agree to disagree on this? There is already multiple version of some software in repositories that have been setup to live together. Any common cases should go in the repository, others the user does needs to be more technical to do, but a non-technical user wouldn't even try on any system.\r\n\r\n-------------------\r\nUsers are stuck with the piece of software installed system-wide:\r\n-------------------\r\n\r\nNot if they are technical.\r\n\r\n-------------------\r\nThe software needs to be downloaded from the official repositories. Well, it doesn’t need to, but an average user wants to stay well away from unofficial repositories for technical reasons;\r\n-------------------\r\nI've never had any problems, and don't know anyone who has. It's not something you hear of. I think the repositories are one of the strong points of Linux. It keeps the whole system up to date, gives you a safe place to get apps, resolves dependencies issues by pulling down everything a app requires, ensures applications use the same version of shared libs when possible and when it isn't make sure the libs of different versions can live in peace together.\r\n\r\n-------------------\r\nIn some cases (especially when the user adds repositories or installs packages directly), the dependency-checking mechanism often fails and users end up with circular dependencies. They are nasty;\r\n-------------------\r\nI just never heard of this being a issue before. If it was such a huge issue, you would think it was everywhere......\r\n\r\n-------------------\r\nA piece of software is bound to a specific distribution, and — what’s worse — to a specific version of that distribution too. It’s not trivial to install Openoffice 3.1 on Ubuntu 8.10. You can argue that you can install the bunch of .deb packages from OpenOffice’s web site. Tell that to your grandmother or your average inexperienced computer user.\r\n-------------------\r\n\r\nWhat is in the repository is what is known to work. You could argue it's a release branch, so should only get bugfixes.\r\nBut I did install OpenOffice 3.1 in Ubuntu 8.10, just added a repository + key and updated. Just like Wine and many other things. Dead easy.\r\n\r\nFor grandmothers this could be put into a installer for them. Where they just double click and enter their password.\r\n\r\n-------------------\r\nIt’s not trivial to “give” a program to a friend. To the end user, giving a program to a friend should be as simple as dragging an icon onto a memory stick; instead, files are scattered all over the system.\r\n-------------------\r\n\r\nRiscOS did that, and it had it's uses, but as a former RiscOS user, you don't want that. Not in the form RiscOS had at any rate (which it does sounds like you want). With FUSE, perhaps an interface like your after could be hacked up. A virtual filesystem you can drag and drop application to/from. Could be a nice little project.\r\n\r\n\r\n\r\n\r\n-------------------\r\nI have Zero Install installed in my system. I studied it inside out. Zero Install does _not_ solve all of the problems I list above. Did you see the contents of the \"Application directory\" created by ZeroInstall? It goes against the \"transparency\" principle my proposed idea tries to work towards.\r\n-------------------\r\n\r\nNope, saw it read about it, realized it was a copy of RiscOS system and lift it alone. Don't get me wrong, I loved RiscOS, but computers have moved on since then, and that way of doing things doesn't scale (and even on the scale it was then, I did have issues a few times because of it).\r\n\r\n-------------------\r\nFor SuperOS's \"RUNZ\" system, it's still under development and I wasn't aware of it. It _seems_ promising -- and so is PC-BSD's system.\r\n-------------------\r\n\r\nCool. Once you have played let us know how you got on. Personally, I'm far from conviced going back to the RiscOS way is better then repositories.\r\n\r\n\r\n-------------------\r\nI consider a \"rant\" a piece that just complains about things. In my piece, I pointed out a problem, explained why it was a problem, and offered a possible solution.\r\nTo me, that's not a rant.\r\n-------------------\r\n\r\nWithout looking at existing systems like you are advocating. \r\nBefore you say it, you stated GoboLinux wasn't what you where advocating.\r\n\r\n"
-
    name: 'Tony Mobily'
    mail: ''
    subject: Right...
    hostname: 151.49.234.18
    created: '1245850747'
    body: "Hi,\r\n\r\n------------------\r\nI'm sure the standard libs in the LSB will expand.\r\n------------------\r\n\r\nGlad you are. I am sure it won't. It's not within their scope to expand to include *desktop* libraries.\r\n\r\n------------------------------\r\n For additional libs the current policy is you should statically link it. The point is, the LSB is at least the start of what you are asking for, so you should have mentioned it.\r\n------------------------------\r\n\r\nIncorrect. The LSB has different goals, and has been around for *years*.\r\n\r\n-----------------\r\nThere are a collection of systems that can be put in place already for the odd application that needs to be per user not system wide. If it's system wide, as most of them will be, you want permissions on who does what, which is what we have now.\r\n-------------------\r\n\r\nThere is a number of ways to do per-user applications, and I am proposing one that solves the point list listed in the article.\r\nThe \"who does what\" you mention applies to _any_ system.\r\n\r\n-----------------------\r\nThought you wanted to agree to disagree on this? There is already multiple version of some software in repositories that have been setup to live together.\r\n-------------------------\r\n\r\nI was talking about user end software, not libraries. It's mentioned clearly in the article.\r\n\r\n-----------------\r\n Any common cases should go in the repository, others the user does needs to be more technical to do, but a non-technical user wouldn't even try on any system.\r\n------------------\r\n\r\nEnd users often want to _try_ a newer version of a piece of software before making it *theirs*.\r\nThis is one basic freedom that the current system doesn't give you.\r\nAgain, please keep in mind that I am talking about end user software.\r\n\r\n\r\n>> Users are stuck with the piece of software installed system-wide:\r\n> Not if they are technical.\r\n\r\nThat's great. As you can see in the article, I am after empowering _average_ users, not \"technical\" ones.\r\n\r\n>> [Staying with official repositories]\r\n>I've never had any problems, and don't know anyone who has. \r\n\r\n...I had huge trouble _yesterday_, and all I wanted to do was install the latest OpenOffice on Ubuntu 8.10.\r\nYou were probably lucky.\r\n\r\n---------------\r\nIt's not something you hear of. I think the repositories are one of the strong points of Linux. It keeps the whole system up to date, gives you a safe place to get apps, resolves dependencies issues by pulling down everything a app requires, ensures applications use the same version of shared libs when possible and when it isn't make sure the libs of different versions can live in peace together.\r\n-----------------\r\n\r\nIf you add unofficial repositories, you end up having trouble. Look up \"pinning\" for example. \r\n\r\n-------------\r\n[dependency hell from unofficial repositories]\r\nI just never heard of this being a issue before. If it was such a huge issue, you would think it was everywhere......\r\n--------------\r\n\r\nTry googling it.\r\n\r\n\r\n-----------------\r\nWhat is in the repository is what is known to work. You could argue it's a release branch, so should only get bugfixes.\r\nBut I did install OpenOffice 3.1 in Ubuntu 8.10, just added a repository + key and updated. Just like Wine and many other things. Dead easy.\r\n-------------------\r\n\r\nGoogle it. I had a recoursive dependency hell which took me ages to fix. And the command line.\r\n\r\n\r\n-------------\r\n[Giving programs to a friend[\r\nRiscOS did that, and it had it's uses, but as a former RiscOS user, you don't want that. Not in the form RiscOS had at any rate (which it does sounds like you want). With FUSE, perhaps an interface like your after could be hacked up. A virtual filesystem you can drag and drop application to/from. Could be a nice little project.\r\n----------------\r\n\r\nI already proposed a solution that already works for others. I think having a virtual file system would be a huge complication -- but I might be wrong.\r\n\r\n\r\n--------------\r\nCool. Once you have played let us know how you got on. Personally, I'm far from conviced going back to the RiscOS way is better then repositories.\r\n--------------\r\n\r\nWe will see...\r\n\r\n-------------------\r\n\"I consider a \"rant\" a piece that just complains about things. In my piece, I pointed out a problem, explained why it was a problem, and offered a possible solution.\r\nTo me, that's not a rant.\"\r\n\r\nWithout looking at existing systems like you are advocating.\r\nBefore you say it, you stated GoboLinux wasn't what you where advocating.\r\n----------------------\r\n\r\n...? What can I say? You have the freedom to see my piece as a rant; we myst have different opinions on what a \"rant\" is!\r\n\r\nBye,\r\n\r\nMerc."
-
    name: code.guru
    mail: ''
    subject: 'Have you seen the Linux'
    hostname: 76.246.253.141
    created: '1245856014'
    body: "Have you seen the Linux kernel's code...?\r\nI don't think this would be possible, to be honest.\r\n-------\r\n\r\nLOL, that is true, but it wouldn't be to hard to make future modifications in C++ would it?\r\n\r\n----\r\nVisit My Blog:\r\nhttp://shallweprogram.blogspot.com/"
-
    name: jabjoe
    mail: ''
    subject: "------------\nI wrote this in"
    hostname: 193.119.19.210
    created: '1245858625'
    body: "------------\r\nI wrote this in the article... you write a comprehensive list of libraries that you use as a \"base\" system, and then if a program requires more libraries, it would have them in its own lib directory. If those extra libraries are installed with the system already, the system-wide ones will be found beforehand.\r\n------------\r\n\r\nThat's standard, search PATH then locally. \r\n\r\nOne thing that helps is to make the dll interface version part of the name. So you app links to lib_123.o and maybe later lib_123.o becomes a wrapper of lib_124.o for old apps. Of course, that doesn't 100% work because sometimes with other implementations bugs show up that where hidden before, but in the open source world this is easily fixed. In the closed world it isn't, so in Windows you have the manifest enforcing.\r\n\r\nWith local only DLLs, you end in DLLs hell, which is another reason MS introduced the manifest, which solves one problem but gives you another, for instance \"hey I actually wanted it to use the new DLL, it fixes the bug!\". Local libs you want to be the exception, not the rule. \r\n\r\nApps can be written like you want, in a single folder, and some are, at least in ported versions. But in general it's better if the libs are system wide and brought down only when needed. Which is why the tend to do that.\r\n\r\nI don't feel your pushing for something new, it seams like what existed on RiscOS and can exist now (on any OS, bar being able to \"execute\" these application folders) but isn't normally done as it's considered bad practice because it doesn't scale.\r\n\r\n----------\r\n...? Just have a shared \"application\" folder system-wide, available to all users. Only users with administration access will be able to copy apps in that folder.\r\n\r\nThis really is the least of the problems.\r\n---------\r\n\r\nHow is that different then now in the area of administration?\r\n\r\nSeams like what would make you happy is just a script that makes a folder containing everything a app needs (sucks it from a deb file?), and creates a namespace to run the app to make it think it's installed normally. I'm sure there are things that make this kind of portable app already. But you wouldn't want the whole system done like that, you only want it when you want to run something that either doesn't play nice with the rest of the system, or you don't have admin.\r\n"
-
    name: jabjoe
    mail: ''
    subject: 'We''ll see what happens with'
    hostname: 193.119.19.210
    created: '1245861742'
    body: "We'll see what happens with LSB, without doubt it will grow. I've got mixed feelings about having a standard base anyway. One of Windows issues is that everything is written to one implementation, so when that changes, loads of hidden bugs surface. Maybe it's better to have to test on many implementations. For open source stuff, some of your users might even fix it for you. ;-)\r\n\r\n\r\nThis looks like what I followed to install the latest OpenOffice in 8.10:\r\n\r\nhttp://news.softpedia.com/news/How-to-Install-OpenOffice-org-3-1-on-Ubuntu-9-04-111105.shtml\r\n\r\n(it does cover 8.10 too)\r\n\r\nIt really was easy.\r\n\r\nDoing a quick google, it seems a big cause of dependency hell is from people mixing debian and Ubuntu repositories. \r\nBut regardless, there does indeed seem to be a issue I've just never hit. But there are better solutions being talked about then walking away from all the advantages of package managing.\r\n\r\nhttp://wiki.winehq.org/TrustingThirdPartyRepositories\r\n\r\nSo DLL hell or dependency hell, not hit dependency hell, but I have hit DLL hell, and I don't like the MS manifest solution. I'll stick with repositories until something better comes along, which at the moment, I'm not seeing out there. I see a net gain from repositories, which I think is why repository based distros have one out.\r\n\r\n\r\nA virtual filesystem can make things much simpler. That's why they are so widely used in Unix systems. I wish Linux was as far along on that front as Plan9, with ALSA meant to be replacing OSS, looks to me like we are moving further away from it. :-(\r\nAnyway, without starting this virtual filesystem, I don't know how much work it would be. Just an idea, which I'm unlikely to >really< look at. Tend to only do things at home (i.e. Linux) that are useful to me. ;-)\r\n"
-
    name: dingletec
    mail: ''
    subject: 'Respectfully, there are a few points incorrect'
    hostname: 68.109.249.82
    created: '1245883804'
    body: "A few points in the beginning of your article are incorrect, and since they were primary examples, I couldn't continue.\r\n\r\nYou mention that under Linux (I primarily use Ubuntu) that you are unable to:\r\n\r\n1. Install software as a non root user.  Using your two examples, Opera and Firefox, this is easily done as a non root user by downloading the tar.gz version into your home folder and extracting.  Simply run the executable file located in that folder.  Easiest way is to create a launcher pointing to it. Drop launcher on panel or desktop.\r\n\r\n2.  Unable to run multiple versions of Opera or Firefox.  As in the above example, download the tar.gz version of as many releases as you like and extract them.  Rename the folder in the case of Firefox, but as in the first example, simply run the executable in each releases folder.  Create launchers pointing to each version on your desktop or panel to simplify the process. "
-
    name: imthefrizzlefry
    mail: ''
    subject: 'Users making System-Wide changes'
    hostname: 131.107.0.77
    created: '1245884652'
    body: "Concerning: \"* Users can not have root access, unless they ARE root; per-user installation is allowed in $HOME\"\r\n\r\nYou replied: \"This would make system-wide configuration hard. I don't think it's a good idea.\"\r\n\r\n----------------\r\n\r\nIt sounds like you are implying users should be capable of making system wide changes.  I think that Windows has demonstrated time and time again that this is a bad idea.  It allows for the very typical situation where a user is capable of installing a virus or other application that can make negative system wide changes.\r\n\r\nI admit that nag screens are annoying, however I think the Linux solution of giving some users permission to use the sudo command with the user's password to elevate a process is the best solution.  It is an improvement over the solution in Windows Vista where the user is asked to confirm each individual change.  \r\n\r\nI feel the answer to your original point of individual users needing to have multiple versions of the same software installed, is best dealt with by having user copies in the home directory, or having the super user account make a system-wide change."
-
    name: dingletec
    mail: ''
    subject: 'Respecfully, one more thing'
    hostname: 68.109.249.82
    created: '1245884894'
    body: "I also just tested your point: It’s not trivial to “give” a program to a friend\r\n\r\nI dragged the opera and firefox folders created by extracting the tar.gz version of each from my Ubuntu system to a thumbdrive.  I carried it over to a coworkers computer which is running Linux Mint (Ubuntu based).  I copied the folders from the thumbdrive to the user folder and ran the executables within.\r\n\r\nBoth ran, and neither are installed on the System.\r\n"
-
    name: kimdolin
    mail: ''
    subject: Metaphor
    hostname: 78.141.86.41
    created: '1245886007'
    body: "I know this may sound as inappropriate metaphor but consider this:\r\n\r\nWhen you want to drive a car you need at least some knowledge and formal status be able to do so. So basically even if your friend gives you his car you should not take it on the road unless you have at least minimal knowledge(intelligence) of the rules. Yes of course, your friend can tell you that the car is in his possession and that it is him who decides who will drive it and when. But it is you who has to have experience to drive a car and knowledge of the rules. Otherwise you may harm somebody etc. . Reducing the overhaul of sharing applications with others does not mean others will be able to use it correctly and that the applications will then play well with other components in the system(with the whole traffic on the road). There has to be some intelligence on the consumers end also. \r\n\r\nDo you know how your car works inside? I doubt that. It is also because you are presented only the nice user interface and do not interact with your engine directly. Yet when you apply for driver's license you should learn the basic concepts. And guess what. Nobody has problem with that. Why not teaching people the basic concepts of Operating System and filesystem structure. Is it less important than learning about a car? \r\n\r\nSystems are complex and will always be. Complexity is a must because it differentiates and unites at the same time. Simplicity is a nice feature but definitely not the best one.\r\n\r\nUsually you do not want to have 3 different versions of shared libraries on your system. It may only happen when the software you want to use is either outdated or bleeding edge. Ordinary user most likely do not want to use bleeding edge software so I do not see the point in this. If the user wants to do something un-ordinary he should no be considered ordinary anymore and it is his responsibility to study documentation and solve the issues. \r\n\r\nI am very happy with ports on FreeBSD and it is not the simplest package management system available. But because I am only presented the nice user interface I can just imagine about the internals. If something brakes during building process I guess I have to solve it on my own."
-
    name: kimdolin
    mail: ''
    subject: Metaphor
    hostname: 78.141.86.41
    created: '1245886198'
    body: "I know this may sound as inappropriate metaphor but consider this:\r\n\r\nWhen you want to drive a car you need at least some knowledge and formal status be able to do so. So basically even if your friend gives you his car you should not take it on the road unless you have at least minimal knowledge(intelligence) of the rules. Yes of course, your friend can tell you that the car is in his possession and that it is him who decides who will drive it and when. But it is you who has to have experience to drive a car and knowledge of the rules. Otherwise you may harm somebody etc. . Reducing the overhaul of sharing applications with others does not mean others will be able to use it correctly and that the applications will then play well with other components in the system(with the whole traffic on the road). There has to be some intelligence on the consumers end also. \r\n\r\nDo you know how your car works inside? I doubt that. It is also because you are presented only the nice user interface and do not interact with your engine directly. Yet when you apply for driver's license you should learn the basic concepts. And guess what. Nobody has problem with that. Why not teaching people the basic concepts of Operating System and filesystem structure. Is it less important than learning about a car? \r\n\r\nSystems are complex and will always be. Complexity is a must because it differentiates and unites at the same time. Simplicity is a nice feature but definitely not the best design.\r\n\r\nUsually you do not want to have 3 different versions of shared libraries on your system. It may only happen when the software you want to use is either outdated or bleeding edge. Ordinary user most likely do not want to use bleeding edge software so I do not see the point in this. If the user wants to do something un-ordinary he should no be considered ordinary anymore and it is his responsibility to study documentation and solve the issues. \r\n\r\nI am very happy with ports on FreeBSD and it is not the simplest package management system available. But because I am only presented the nice user interface I can just imagine about the internals. If something brakes during building process I guess I have to solve it on my own."
-
    name: cjs8
    mail: ''
    subject: 'relocatable package installs'
    hostname: 216.83.145.93
    created: '1245904108'
    body: 'Uh... have you heard of relocatable packages that can be installed with a prefix of your own choosing?  There''s even a couple standard prefixes for non-standard package installations.'
-
    name: ebug
    mail: ''
    subject: 'What is broken?'
    hostname: 71.238.181.250
    created: '1245904684'
    body: "I am not a programmer just an end user. In my experience in using linux (Ubuntu/LinuxMint), I install programs through ADD/REMOVE APPLICATIONS, or deb files thru GDebi, or Synaptics or Minstall. So what is broken?\r\nI understand that beneath this simplicity, there are things that need to be fix which only you guys (the hardcore coders) can solve. But for end user like me, installing programs in linux particularly with Ubuntu/Linuxmint are now soooooo easy. So why is it so hard to penetrate the huge market or users? Probably, in my opinion, it is that many programs for Windows/OSX are marketed individually. You can see them in stores, fliers, magazines etc. In Linux, the programs are available after you install or somebody forced you to install a distro. Ask someone what is GIMP or Amarok. For the 98% something people, these are just funny sounding words. Try asking them what is Photoshop,...you see what I mean! So what is my point? \r\n1. Installation and sharing of programs in Linux are NOW so easy.  \r\n2. Promote the best programs to the masses. With a caption like...\"Amarok, you're long lost love....\" then beneath the packaging, \"Works best with Linux\". If I know Amarok's reputation, I'll install Linux OS to just be able to install my amour.\r\n\r\nSo coders, do what you got to do, I don't care a bit. But thank you for bringing Linux to life with all its glory and shortcomings. We do love or loved someone even with his/her imperfections. Right?  "
-
    name: jabjoe
    mail: ''
    subject: '>> 1. Lack of support for'
    hostname: 193.119.19.210
    created: '1245915691'
    body: ">> 1. Lack of support for the most popular games running real well\r\n\r\n> OK. So, you are a game developer and want to release it. Do > you release it as a deb package? Or RPM? For Ubuntu 8.04? Or > Ubuntu 8.10? Or maybe Fedora 9? Fedora 10? Or Debian? Or...?\r\n\r\nLook at Nexzuiz and see. You can download a deb file, probably an rpm, but also a zip file containing an executable for each platform.\r\n\r\nThis is not the problem with game development on Linux, it's the market, or lack of it. If games are a big driver for a platform, it's a chicken and egg problem.\r\n"
-
    name: 'Tony Mobily'
    mail: ''
    subject: 'In my experience...'
    hostname: 151.49.234.18
    created: '1245920928'
    body: "Hi,\r\n\r\nMy feeling, from practical feedback given by software makers and from my experience, is that a lack of an easy, multi-distro, standard way of distributing software discourages software makers from doing so.\r\n\r\nMerc."
-
    name: 'Tony Mobily'
    mail: ''
    subject: 'This makes it hard'
    hostname: 151.49.234.18
    created: '1245921158'
    body: "---------------\r\nA few points in the beginning of your article are incorrect, and since they were primary examples, I couldn't continue.\r\n---------------\r\n\r\nIt makes it a little awkward, to discuss an article you haven't read.\r\n\r\nYou talk about .tgz files. I don't think it's a sane way to go -- please feel free to read the rest of the article to see why.\r\n\r\nA short list of points:\r\n\r\n* You lose the ability to reuse at least some of the libraries. See my point about having a common set of libraries\r\n\r\n* It's not straightforward to the average user to install an application that comes in .tgz format. I tested it numerous times with average users -- the failure rate was huge\r\n\r\n* What I suggest is _somehow_ similar to the .tar.gz distribution method, but with several enhancements which allow library sharing, default icon, automatic upgrading, etc.\r\n\r\nBye,\r\n\r\nMerc.\r\n\r\n\r\n"
-
    name: jabjoe
    mail: ''
    subject: 'Developing a game requires'
    hostname: 193.119.19.210
    created: '1245941073'
    body: "Developing a game requires less libs than an application. You could maybe get away with just OpenGL and SDL.\r\n\r\nId's engines have been used as the basis of many games, and they have always been cross platform. There is Quake even for the RiscPC! There have been many possibilities of many games being easily developed-on or ported-to Linux. But they are not, and this is because of the lack of a market. As someone who works in the game industry, I can tell you PC games generally aren't that profitable, and that's Windows games!\r\n\r\nNexuiz is a really good example that it's not the development and distribution method that is the problem.\r\n"
-
    name: zephyr1977
    mail: ''
    subject: 'I couldn''t disagree more'
    hostname: 67.162.108.7
    created: '1245949229'
    body: "I couldn't disagree with you more.  Linux, like any other software, has it's problems but one of the things Linux got VERY right is package management.  I'm not going to go over everything but just your main points.  \r\n\r\nYou don't want individual users to install their own copies of software..it's that simple.  It may sound nice, but in a home setting this is a non issue.  In a corporate setting you want users to have a locked desktop.  You don't want them installing anything they want.   It can lead to an absolute nightmare for administrators.  Per user installation is just poor design.  \r\n\r\nAs for installing multiple versions of software, you hit on one of the extremely few programs that might meet a situation like that.  However someone above me just answered the question about how simple it is to do that.  But seriously do you need multiple versions of office software?  of your media player?  of your favorite game?   I can see absolutely no reason to have multiple versions of 99.9% of the software available in any situation.  (except for libraries which already allow you to easily install different versions).\r\n\r\nYou can in fact download and install software not in the official repositories easily if you choose the right format (assuming it's availabe).  The problem comes if you don't use one of the most popular distros, then you run into trouble.  But Linux by nature will always be fragmented.  If your distro of choice isn't popular enough for projects to build a package for, then you accept that or choose a different distro.  There will never be one way of doing things in the Linux world which is good, it leads to more innovation.  But that also means there will never been one standard binary format that works on everything.  If that's something you want maybe Linux is not for you.\r\n\r\nAs for older software working on newer distributions...I understand the reasoning here, specifically for companies that may have some expensive custom app that might end up tied to a specific distribution and version.  However backwards compatibility should never be a goal of Linux.  If you want to see how that works out just take a look at Windows.  Generally apps die off for a reason but the beauty of Linux is that if you REALLY just want to use it, with the right knowledge you can update it yourself.  For the average user?  They'll stick to a newer version or to the apps that have come out on top in their respective arenas.\r\n\r\nNow giving someone an app...is it really that hard to copy a .dep or .rpm file onto a memory stick and run it on there computer?  Technically that is just copying an icon onto a memory stick if you're using the GUI.  Better yet, just find out the package name and use the package manager!  No copying needed.\r\n\r\nBesides these individual points, the biggest problem with the way you perceive software installation should be, is it throws out the single greatest advantage that package management has...and that is quite simply management. It manages all of my software for me.  It checks every single program on my computer for updates.  I would hate to have to go back to managing all these programs on my own or worse having every program have their own little hidden update manager running in the background...it would be like going back to Windows *shudder*.  Not a single distribution has a software installation system.  It's a management system.  And that's what sets it apart from Windows and Mac.  Could things be done better in some areas?  Sure.  Are certain package managers better than others?  Maybe (as it has a lot to do with personal preference).  But throwing out the whole thing in order to make a mess of your system, have software installed in any which directory the user throws it in, end up with multiple instances of the same application in different users directories, have multiple copies of the same library strewn around the system?  Then have to manage and update all of these sperately? (or are you proposing some magical update manager that manages ever file you drag and drop onto your system?) Sounds like a winning idea to me!"
-
    name: zelrik
    mail: ''
    subject: zelrik
    hostname: 130.179.72.151
    created: '1245949965'
    body: "I am not an expert but there are a couple of points that are bothering me :\r\n\r\n    * Users need to have root access in order to install a piece of software; no per-user installation is allowed\r\n\r\nI should say that anyone who has an administrative password can install software and not necessary root. I agree that once the software is there...well it's there for everyone but the configuration remains personal.\r\n\r\n    * It’s very tricky to install several versions of the same piece of software. Just think of the poor graphic designer who needs to install several versions of Opera and Firefox;\r\n\r\nI dont really see the point of having several versions of the same software but ok.. maybe it's a pain in some cases...\r\n\r\n    * The software needs to be downloaded from the official repositories. Well, it doesn’t need to, but an average user wants to stay well away from unofficial repositories for technical reasons;\r\n\r\nI would argue PPA's are pretty handy already while I agree that it still needs improvements. (Mainly for security reasons imo)\r\n\r\n    * In some cases (especially when the user adds repositories or installs packages directly), the dependency-checking mechanism often fails and users end up with circular dependencies. They are nasty;\r\n\r\nI havent experienced this personally but I have heard of it, a lot more for 'rpm-based package managers' though.\r\n\r\n    * A piece of software is bound to a specific distribution, and — what’s worse — to a specific version of that distribution too. It’s not trivial to install Openoffice 3.1 on Ubuntu 8.10. You can argue that you can install the bunch of .deb packages from OpenOffice’s web site. Tell that to your grandmother or your average inexperienced computer user.\r\n\r\nAgain, I disagree, .debs and PPA are already pretty good and fairly easy to use.(while needing some improvements)\r\n\r\n    * It’s not trivial to “give” a program to a friend. To the end user, giving a program to a friend should be as simple as dragging an icon onto a memory stick; instead, files are scattered all over the system.\r\n\r\nYou can still send a .deb but it's kinda pointless in most cases. Correct me if I am wrong but I really do think Canonical is working on improving software portability also.\r\n\r\n\r\n----------------\r\n\r\nJust some thoughts..."
-
    name: ammorais
    mail: ''
    subject: 'I can''t agree with you'
    hostname: 89.180.136.24
    created: '1246015394'
    body: "First, I'm not a native English speaker so sorry for anything.\r\n\r\nI'm sorry, but your article seems from someone that is a complete newbie on linux, and is \r\ntrying to overcome the normal newbie frustration with some poor excuses about why his familiarized model is better.\r\nGet over it and try to understand Linux and why it's consider on of the most secure existing OS.\r\n\r\nFirst, let me just tell you that Ubuntu != Linux\r\n\r\nNow let's go to the facts.\r\n\r\n<cite>Users should be able to install software even without being root</cite>\r\n\r\nFirst, users are allowed to install software if they aren't root. You can install software on your home directory, as long as the software allows it and the software doen't require admin privileges(like accessing the hardware). \r\nEven Windows started to request to you admin privileges to install software(in vista if I'm not wrong). Being able to to install programs without root previleges is a characteristic of a poor OS design that runs the kernel and applications in the same privileged space. that's what makes a fresh install windows box compromised just after a few minutes connected to the internet.\r\n\r\n<cite>It’s very tricky to install several versions of the same piece of software. Just think of the poor graphic designer who needs to install several versions of Opera and Firefox;</cite>\r\n\r\nThat's not true. In the very rare cases that applications are justified to have more than one version, distros normally offer a solution.\r\n\r\n<cite>Users should be able to run either their own version of the software, or the one installed on the system (if any)</cite>\r\nAs someone pointed out, if you run a newbie friendly distro like ubuntu or some other populasr distro, you can since probably there is a deb package for you. If you run a more advanced distro, you probably are an advanced user and you are able to manage a simple software instalation. I haven't got yet a distro that I didn't manage to install custom software.\r\n\r\n<cite>Software just needs to work — unchanged — even if it’s a bit old and it’s run on a newer distribution</cite>\r\nWhy? Why do you think that is an advantage. Only OS's based on closed binary have to be ABI compatible. Linux is 99% open source. You can always recompile a version for your specific platform, and normally applications are optimized to your system and to your computer.\r\n\r\n<cite>It should be possible to “give” a piece of software to a friend by simply dragging an icon onto a memory stick</cite>\r\n\r\nYou can give software from to your friend dragging an icon from your desktop to a pen. You have several formats. deb, rpm, tar, tgz, tar.bz2, etc... The difference is that you are not familiarized with this formats. What's next? You arguing that Linux executables should end in .exe just because you think it's more intuitive.\r\n\r\nConclusion: I know it's difficult to stay objective when we have an emotional background attached. What you know is windows and you probably feel(and believe), the windows system is more intuitive, as we are getting older it's difficult to learn new stuff. Linux is different, but it isn't less functional in any way.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
-
    name: bogdanbiv
    mail: ''
    subject: 'Case insensitive file names'
    hostname: 84.232.160.109
    created: '1246140346'
    body: 'Call my reply flame bait, but IMO, an important issue would be case insensitive file names'
-
    name: admin
    mail: ''
    subject: Well...
    hostname: 151.49.229.95
    created: '1246151237'
    body: "Hi,\r\n\r\n---------------\r\nFirst, I'm not a native English speaker so sorry for anything.\r\n\r\nI'm sorry, but your article seems from someone that is a complete newbie on linux, and is\r\ntrying to overcome the normal newbie frustration with some poor excuses about why his familiarized model is better.\r\n-------------------\r\n\r\nWell, I've been a programmer for about 18 years (although I moved away from device drivers and system programming about 10 years ago) and have used GNU/Linux since 1995. I am sure I qualify as a newbie compared to a _lot_ of people out there. However, I was more talking about what I had seen in terms of newbies using GNU/Linux -- and failing. \r\n\r\n\r\n\r\n-----------------\r\n\"Users should be able to install software even without being root\"\r\n\r\nFirst, users are allowed to install software if they aren't root. You can install software on your home directory, as long as the software allows it and the software doen't require admin privileges(like accessing the hardware).\r\n-------------------\r\n\r\nThe missing keyword there -- my fault -- is \"easily\". Average users get lost when they download a .tar.gz\r\n\r\n-----------------------\r\n\"It’s very tricky to install several versions of the same piece of software. Just think of the poor graphic designer who needs to install several versions of Opera and Firefox;\r\n\r\nThat's not true. In the very rare cases that applications are justified to have more than one version, distros normally offer a solution.\r\n-----------------------------\r\n\r\nTesting a new version of a program before embracing it is not rare. The user should have the freedom to do that.\r\n\r\n\r\n----------------------\r\n\"Users should be able to run either their own version of the software, or the one installed on the system (if any)\"\r\n\r\nAs someone pointed out, if you run a newbie friendly distro like ubuntu or some other populasr distro, you can since probably there is a deb package for you. If you run a more advanced distro, you probably are an advanced user and you are able to manage a simple software instalation. I haven't got yet a distro that I didn't manage to install custom software.\r\n-----------------------\r\n\r\nMy article is trying to go a little further than \"If you use Ubuntu then you *should* be right\"... In the article, I am trying to offer a cross-distro, transparent solution.\r\n\r\n-----------------------\r\n\"Software just needs to work — unchanged — even if it’s a bit old and it’s run on a newer distribution\"\r\n\r\nWhy? Why do you think that is an advantage. Only OS's based on closed binary have to be ABI compatible. Linux is 99% open source. You can always recompile a version for your specific platform, and normally applications are optimized to your system and to your computer.\r\n---------------------------\r\n\r\nRunning old software is not a good idea. However, getting somebody else to decide for everybody which version of the software you should use is limiting.\r\n\r\nI might desire to burn a CD with all my most precious end-user programs, and give it to everybody when I see them -- and expect their super-new distro to just run them.\r\n\r\n-------------------------\r\n\"It should be possible to “give” a piece of software to a friend by simply dragging an icon onto a memory stick\r\n\r\nYou can give software from to your friend dragging an icon from your desktop to a pen. You have several formats. deb, rpm, tar, tgz, tar.bz2, etc... The difference is that you are not familiarized with this formats. What's next? You arguing that Linux executables should end in .exe just because you think it's more intuitive.\r\n---------------------------\r\n\r\nI am very familiar with those formats. Average users aren't. And most users will install software from a repository, hence having no intuitive idea of \"where\" the program is, and how to \"move it\" somewhere else.\r\n\r\n--------------------------------\r\nConclusion: I know it's difficult to stay objective when we have an emotional background attached. What you know is windows and you probably feel(and believe), the windows system is more intuitive, as we are getting older it's difficult to learn new stuff. Linux is different, but it isn't less functional in any way.\r\n------------------------------------\r\n\r\n...? I offered a technical proposal on how to deal with what I consider a problem. I can only assume you missed the technical proposal in the second part of the article?\r\nAnd no, I haven't used Windows in years... But I have used Macs, and can clearly see the differences.\r\n\r\nBye,\r\n\r\nMerc.\r\n"
-
    name: jabjoe
    mail: ''
    subject: 'Reading material'
    hostname: 193.119.19.210
    created: '1246356126'
    body: "http://en.wikipedia.org/wiki/Dependency_hell\r\n\r\nPersonally I come away thinking we already have the best solution to date. Package management. For special cases there is nothing stopping portable applications being created.\r\n\r\nWhat really seals the deal for me is:\r\n\r\n* Safe. A software repository is software known to be safe. In Windows a good proportion of the problem with infections is because people install apps from any old place.\r\n\r\n* Easy for user. One place to get software known to work.\r\n\r\n* Easy for programmer. Source dependencies solved too. Building a open source app on Windows is often a nightmare as you have to hunt down the right version of the right libs and install them as expected. With package management, you just add the source repositories and say install the source for A, and it tells you A needs B,C and D dev libs, you still want to install? You just say yes and your ready to program while your Windows counter part hasn't even started weeping at his desk (which he will in a few hours, once the horror of his situation has sunk in). ;-)"
-
    name: 'Mitch Meyran'
    mail: ''
    subject: 'It''s been said in other'
    hostname: 84.100.54.240
    created: '1246357660'
    body: "It's been said in other comments, but...\r\n\r\nInstalling an application system-wide is what the root account is about. Local installs are perfectly possible, and a modern OS does not prevent you from running a local copy of any software that does NOT require system-wide installation. Even under Windows, which enforces the very same system on any machine running an NT kernel; the fact that Microsoft decided to make everybody 'root' by default is faulty design, not an asset.\r\n\r\nInstalling several applications side by side: well, this is faulty design on the part of installer designers, under Windows too: nothing, and I do mean NOTHING, prevents you from installing any copy of any software in a separate directory and to access it freely, be it in windows or Linux (actually, Linux already has a design for that: /usr for system-wide, /usr/local for local users, /opt for alternative, local users, and inside /home for single user... And not all in /Program Files!). Yup, 2 points covered at once.\r\n\r\nOfficial repositories: modern distros allow the install of local packages, untrusted repositories (no signature) with user confirmation, or trusted repositories; most require root access if the installed package will modify stuff outside the user's account.\r\n\r\nInstalling packages from outside official repositories: that's what personal repositories are for. And personally, I didn't find installing OOo packages from .deb packages than MSO from a CD (key, updates, reboots and all)\r\n\r\nSoftware running unchanged: well, it does.\r\n\r\nCopying an installed application to give it away: no. Software are delitace collections of stuff, that's why you have installers. Give a friend an original installer, not files copied from here and there!\r\n\r\n---\r\nA computer is like air conditioning: it becomes useless when you open windows."
-
    name: bogdanbiv
    mail: ''
    subject: 'Finding a solution shouldn''t be as hard as you say'
    hostname: 84.232.160.167
    created: '1246452084'
    body: "We should just add that when users run package management software without administrative rights the default installation prefix should be ~/usr or ~/.usr instead of /usr. Configuration should go into ~/etc or ~/.etc.\r\n\r\nJust change the installation prefix when users do not have admin priviledges.\r\n\r\nAlso, because we retain the most common unix tree we can move/migrate software from just one user to system wide availability. It would be just: \r\napt-get remove firefox #uninstall user-space firefox\r\nsudo apt-get install firefox. #install system wide firefox\r\nsudo mv ~/.gnome /etc/... #copy customized configuration\r\n\r\nAlso adopting the /etc structure in user-space would solve the mess with user specific configuration files: .bash_history, .mozilla-thunderbird/, .subversion/ and .gnome/ could all move from ~/. to ~/.etc\r\n\r\nTo me this is just a small modification in the package management software, something which should be easy with the help of Package Kit.\r\nSo what do you think?"
-
    name: bogdanbiv
    mail: ''
    subject: 'Change installation prefixes for non-root accounts'
    hostname: 84.232.160.167
    created: '1246548146'
    body: "I got this idea today when I installed Firefox 3.5 into /home/user/apps, because it was a tar ball and there are no packages for my distro, yet.\r\nBut when I thought what flaws are in this strategy, I quickly found the biggest: with the ~/apps scheme, you get the system path of what’s in the system plus ~/apps/firefox/, ~/apps/eclipse, which is all wrong by my standards. Why not keep in userspace the split between bin, docs, and configuration as it is standard unix system wide?\r\nAnd then, logic follows that if we keep the same tree structure in /home/users/usr as it is system, why not just use the standard package management software?\r\nWhat do you think?\r\nNB: I used ~/. as a shorthand for /home/user1/.\r\n\r\nUPDATE: A... I've put roughly the same post twice... sorry guys!\r\nI edited the text to remove duplicates."
-
    name: thornik
    mail: ''
    subject: 'Strange article...'
    hostname: 41.243.253.140
    created: '1246611509'
    body: "I agree only with 'Linux has a problem' and pointed issues. But problem sit much deeper: in kind of dependency between modules and a whole development architecture. GoboLinux is THE BEST what you can afford now in this ugly Linux.\r\nProblem not in \"this is user's soft, this is system's\" - problem in static link between \"library\" and \"soft\". If you need LibJPEG, WTF you ask for version \"1.7.3\"?? Who cares which version is there? If soft worries about exact version, where some \"feature\" first appear, just point it! \"require LibJPEG >= 1.7\" - it's enough. Even more exotic \"require LibJPEG stable\" or \"option LibMP3\" - module LibMP3 _can_ be used, but not necessary. Now we have idiotic packages, which pull a whole system behind even if this is \"ls\" with optional GUI - be sure, whole X system with Gnome & KDE will be installed! Unix way, heh...\r\n\r\n> There should be a well defined directory tree that contains a whole application.\r\nand earlier:\r\n> The Unix file system has been around for a long time — for good reason.\r\n\r\nha-ha :) Very logical! WHERE you will put your 'application' when you have a mess of /bin /sbin /usr/bin, etc? Use your 'good reason' file system!\r\n\r\nWell, this article is not a revolution - it's just throwing shit to air, long-long time assembled shit named Linux. If you wanna revolution, throw away LINUX - most ugliest system."
-
    name: 'Terry Hancock'
    mail: ''
    subject: 'Hard links and reference-counting'
    hostname: 68.116.159.234
    created: '1247158260'
    body: "> You don't want each user to have their own copy of the app, very few apps are users going to need their own copy. So you want a system of shared applications. So who decides what is installed or not? One user could uninstall another's app. So you end up with permissions.\r\n\r\nAt first I thought I agreed with you on this, but then I started thinking about how programming languages like Python handle the problem, which is reference-counting. Then I remembered that my current back up system does precisely this using hardlinks, which is a common element of nearly all Unix/Linux filesystems.\r\n\r\nOne could easily imagine an installation system which shows each user an independent `/usr` drive (or `/usr/lib` or `/usr/share/lib` or whatever is needed), but _without_ taking up (much) more space when the same shared object libraries are installed -- instead, the libraries get hardlinked to the same data. So long as any one user is using a given library, the library is stored on the system, but when the last user abandons it, it automatically goes back into the free space pool. It's a simple reference-counting system, which is how standard Unix/Linux filesystems work normally, so it doesn't require new engineering on that level.\r\n\r\nOf course, this won't satisfy the \"one app/one file\" requirement that Tony suggests (I'm not too sure about the sensibility of that requirement, though I do appreciate the convenience it would provide).\r\n\r\nBut it does provide a means of supporting multiple library version installations on the same computer.\r\n\r\nWhat would be even nicer is if individual applications could pick and choose which library to bind to. This may be harder, though, if I understand how library-binding works.\r\n\r\nAs regards the one-file idea, might there be a way to trigger (or suggest) installation of necessary libs from library loading errors? One could imagine an installation system that read those logs to look for failures from applications which are not within the package-management system. Maybe some kind of helper application or plugin for some user-friendly package manager like Synaptic?"
-
    name: 'Terry Hancock'
    mail: ''
    subject: 'Hard-coded directories'
    hostname: 68.116.159.234
    created: '1247161850'
    body: "> Installing several applications side by side: well, this is faulty design on the part of installer designers, under Windows too: nothing, and I do mean NOTHING, prevents you from installing any copy of any software in a separate directory and to access it freely, be it in windows or Linux (actually, Linux already has a design for that: /usr for system-wide, /usr/local for local users, /opt for alternative, local users, and inside /home for single user... And not all in /Program Files!). Yup, 2 points covered at once.\r\n\r\nSorry, but I've come across too many hard-coded filesystem dependencies in my life not to comment on this. If a library is almost always installed in the same place, then there are going to be packages that just write that location right into the code (or in the Makefile or somewhere else that isn't easy to find and configure).\r\n\r\nThere's really very little that distributions or installers can do to stop programmers from being lazy this way. Hopefully you won't see this in the most popular end-user applications -- it's possible that I've seen this more often because I have maintained aging crufty scientific packages, but I have definitely seen it in packages I use.\r\n"
-
    name: darkborn
    mail: ''
    subject: 'GOD BLESS YOU!'
    hostname: 193.198.221.151
    created: '1247523821'
    body: '...and Mark Shuttleworth hear you! :)'
-
    name: cichlasoma
    mail: ''
    subject: Nix
    hostname: 89.176.61.68
    created: '1260328340'
    body: "Nix(OS) goes in the same direction at least.\r\nhttp://nixos.org/"
-
    name: mmarion7
    mail: ''
    subject: 'A Newbie agrees'
    hostname: 99.195.185.216
    created: '1265232813'
    body: "As one of the unwashed masses that represents that market penetration mentioned in the article I can wholeheartedly agree that the difficulty installing software is THE reason I don't use Linux as my primary OS.\r\n\r\nI have revisited the Linux world every year or so for about 10 years. Installation has improved hugely, hardware support is almost a non-issue now, but installing software remains an absolute mystery.\r\n\r\nInstalling from a distribution CD is simple, but after that I'd rather re-install the OS than try to install software.\r\n\r\nNot a criticism of the OS, just the experience of a newbie who isn't a hobbyist or an IT professional."
-
    name: gondorr
    mail: ''
    subject: 'it''s about the missing'
    hostname: 141.52.65.41
    created: '1329415341'
    body: "it's about the missing differentiation between OS and application, one mozilla developer mentioned this before: http://benjamin.smedbergs.us/blog/2006-10-04/is-ubuntu-an-operating-system/\r\n\r\nalso, this topic was already solved. autopackage:\r\nhttp://web.archive.org/web/20061124075140/http://www.autopackage.org/faq.html#1_1\r\n\r\nbut, again missing support from the community http://web.archive.org/web/20080331092730/http://www.linux.com/articles/60124 Autopackage struggling to gain acceptance"
