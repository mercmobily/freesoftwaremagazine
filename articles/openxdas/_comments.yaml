-
    name: undefined
    mail: ''
    subject: 'correction, confusion, and a question'
    hostname: 192.91.147.34
    created: '1179907646'
    body: "first, a correction: CORBA is maintained by the OMG, not the Open Group (though the Open Group has a validation suite for ORBs called CORVAL).\r\n\r\nsecond, my initial confusion: it took me until the bottom of the first page to realize what you meant by \"software auditing\".  first i thought, \"good, we need an open source alternative to Coverity's Prevent (fka Standford Checker).\"  then i realized you weren't talking about that kind of \"software auditing\", so then i thought, \"can't we just get behind auditd and snare so we have at least one standard linux audit subsystem?\"  then i finally realized you were talking about a library for standardized application self-reporting.  (maybe i'm just slow or have been thinking about those other things way too much. ;-)\r\n\r\nthird, my lingering question: is what you described really called \"auditing\"?  yeah, i guess a common definition (http://dictionary.reference.com/search?q=audit) doesn't require a \"third party\", \"outside observer\", etc, but no one takes a self-audit seriously.  and when it comes to security, there are too many reasons not to trust a self-audit (mistakes, misunderstandings, subversion, rogue).  The correlation between events and audit messages gets overlooked, are misinterpreted, or are subverted (buffer overflow, code injection).\r\n\r\nis the \"auditing\" concerning the application's upstream or downstream (humans and/or other processes)?  so that an application's use of openxdas is not to audit the application itself, but to verify upstream (verify the user's actions) and/or downstrean (the application says it connected to the database, but the database didn't report it)?  is it to create a composite picture of the whole system, like interviewing everybody at the scene of an accident to piece together what really happened (like the blind men each describing a different part of the elephant)?\r\n\r\non the first page you make a big deal about the differences between logging and auditing, but from my single-application security-critical perspective, your \"auditing\" is really nothing more than \"standardized self-reporting\"."
-
    name: 'John Calcote'
    mail: ''
    subject: 'Response to confusion and question'
    hostname: 137.65.132.55
    created: '1184009690'
    body: "Hmmm...Interesting viewpoint. So what you're saying is that the only proper way to do a secure audit is to build and install a trusted kernel-level service that monitors and reports on system calls made by user-space applications? \r\n\r\nThis would certainly solve the problem of instrumenting packages - all packages are automatically instrumented - to the degree that they can be using this method.\r\n\r\nI don't actually disagree with this approach. The problem I have with it is that many companies write software for multiple platforms, and they would like to have audit records (events) reported on all of their target platforms. But each platform has a different set of system services - or at the very least different names for the same classes of services. Who's going to write it, and who's going to standardize it, so that everyone will want to use it? \r\n\r\nNovell has been doing what you call self-auditing for decades. People not only trust it, but they want it. The fact is, system administrators tend to trust the software they purposely install - foolish notion perhaps, but true, nonetheless. They trust it to do what it was advertised to do - but more to the point (and definitely less foolish), they trust it to send proper audit information to audit servers.\r\n\r\nI appologize for not being more clear on the nature of XDAS in the first place. I see now as I re-read the article with this thought in mind that you are correct - the context is not very well defined up front."
-
    name: undefined
    mail: ''
    subject: 'i admit, it''s semantics'
    hostname: 192.91.147.35
    created: '1184019681'
    body: "yes, the ultimate assurance would be a formally verified kernel (see \"EAL 7\" and MILS, \"Multiple Independent Levels of Security\") that reported application behavior.  but that's not always necessary, just as an IRS \"audit\" is not to the same level as a criminal court case (with evidence, witnesses, jurors, judge, etc).\r\n\r\nwhat's necessary?  depends on the requirements and what level of security/assurance is needed.  there are 7 levels of EAL because each successive level costs more to implement and the insurance shouldn't cost more than the respective risk (you don't buy a $1000 safe to protect $100).\r\n\r\nbut i think my hang-up was in semantics: \"auditing\" communicates to me a third-party/outside-observer arrangement, where what you describe is \"logging\" or \"reporting\".\r\n\r\nexamples of auditing:\r\n<ul>\r\n<li>linux kernel audit subsystem (\"auditd\"): kernel reports on user-land syscalls\r\n<li>NTFS \"auditing\": NTFS reports on user & system file actions\r\n<li>IRS \"audit\" (for americans): IRS scrutinizes supporting documentation and recalculates tax return comparing it to submitted tax return\r\n</ul>\r\nexamples of logging/reporting:\r\n<ul>\r\n<li>Windows event log: applications & system report on themselves \r\n<li>syslog: applications & kernel report on themselves\r\n<li>SMART (\"Self-Monitoring, Analysis, and Reporting Technology\"): hard drive reports on itself\r\n</ul>\r\nokay, the event log and syslog are not good examples because they actually contain both \"logs\" (from the applications about themselves) and \"audits\" (NTFS auditing output ends up in the event log, pam login failures go to syslog).\r\n\r\nlogging is useful in friendly situations when you trust the reporter (debugging, record keeping), where auditing is required in adversarial situations where the reporter needs to be reasonably trusted (if only due to degrees of separation, no \"conflicts-of-interest\", bypartisan, etc).\r\n\r\nif Novell (Netware, i presume) is reporting on file system permissions exercised by the users, then i would call that \"auditing\" (the users).  if Novell is reporting on administrative actions (creating a new user, changing user permissions, etc) then i would call that \"auditing\" (the administrators, as that is probably who initiated the action).  but if Novell is reporting on what itself did (wrote 80 MB to the network, sustained 20 MB/s to the disk array, wrote a file to disk), then that's \"logging\".\r\n\r\nlogging and auditing are both useful (and even more useful when standardized across platforms/systems to facilitate processing), but they are not the same and, imho, should not be used interchangeably."
