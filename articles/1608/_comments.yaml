-
    name: 'Robert Romberger'
    mail: ''
    subject: 'Developer responsibility'
    hostname: 71.105.59.77
    created: '1150568478'
    body: "Not all supposedly stable, 1.x+ versions have documentation either. This is definitely a problem throughout the FOSS world. Understandable, yes, since many of the programmers are looking to \"scratch an inch\" or solve a problem of their own when they write the software; however, they should be thinking twice before plopping said software out to the public to tackle without clearly defining what problem (itch) the software is supposed to solve. I think it would be easier to develop documentation if the community knew what the software was supposed to do before they had to download it and try it out. Developers should also take some time to comment their code in a meaningful way - this function does this, this class does that, etc. - rather than the cryptic \"doesn't work yet\" which I have seen too often to specify any one piece of software as an offender.\r\n\r\nAnother thing that some developers would like is to have the community write the manuals for them. Okay, the developer has identified an area that they need help with. The community still needs a rudimentary idea of what the program is supposed to do to be able to find common ground to be able to write a user guide. Again, not high on the to-do list of a developer that says, \"works for me\".\r\n\r\nWhich brings me to my last peeve, lack of developer communication. Great, works for you, but doesn't work for me. So, how do I make it work? RTFM? What FM? Answer your e-mail! I've seen many developers create a distribution of their software, then completely abandon it. As far as I am concerned, I'm free to abandon your software and let anyone (and everyone) know what you think of your work and your potential user base. Good luck finding a job, buddy. Software development is a two way street. You have to have some communication with your potential user base to see what problems they are having and see if you can solve those problems either with new code, or a simple \"you use it this way\" comment. A quick look at SourceForge or Freshmeat will show you that there are plenty of other developers out there looking to scratch that same itch, and many of them are serious about helping the potential user base actually use their program.\r\n\r\n--\r\nBob\r\n"
-
    name: 'Terry Hancock'
    mail: ''
    subject: '''writing the manuals for them'' ...'
    hostname: 68.93.224.4
    created: '1150749371'
    body: "<blockquote>Another thing that some developers would like is to have the community write the manuals for them. Okay, the developer has identified an area that they need help with. The community still needs a rudimentary idea of what the program is supposed to do to be able to find common ground to be able to write a user guide. Again, not high on the to-do list of a developer that says, \"works for me\".</blockquote>\r\n\r\n<p>Yeah, that's one of my worst peeves too! I hate it when I ask for documentation (or an explanation), and get the standard -- \"well there isn't any, why don't you write some\" response: <i>How am I supposed to do that if I can't figure out what it does!?</i></p>\r\n\r\n<p>I suppose they imagine documentation to be some kind of magic skill that comes coupled with mind-reading ability. When you come up with something for the first time, it just stands to reason that you, the developer, are the only person <i>qualified</i> to write the basic documentation. Asking someone else to do it is asking them to make guesses --- and that's asking for <i>wrong</i> documentation (of which free software has <i>plenty</i>).  In fact, this is usually the real problem with finding free software documentation: not <i>too little</i> documentation, but <i>too much conflicting</i> documentation.</p>\r\n\r\n<p>Maybe I'm biased because writing comes fairly natural to me, but I usually write the documentation and the code <i>at the same time</i>.  This is so easy to do nowadays: we have a variety of self-documentation systems that make it trivial to turn code comments (and \"docstrings\" in Python) into readable API and overview documentation that is automatically kept up to date.</p>\r\n\r\n<p>Of <i>course</i>, we realize that this kind of automated documentation will never be up to the same standards as real tutorials (which I'll happily contribute to writing), but there's an absolute minimum level of documentation that the developer is the best suited person to write.</p>\r\n\r\n<p>I think developers also sometimes miss important understandings of their own work when they don't do this. Figuring out how to express what your goal in plain language is an important step in making sure you know what you're trying to do. Otherwise, there is far too much temptation to write sprawling, confusing, and ill-focused code.</p>\r\n\r\n"
-
    name: 'Ryan Cartwright'
    mail: ''
    subject: 'There are some things a programmer can''t document'
    hostname: 82.108.129.98
    created: '1150803479'
    body: "<cite>I suppose they imagine documentation to be some kind of magic skill that comes coupled with mind-reading ability. When you come up with something for the first time, it just stands to reason that you, the developer, are the only person qualified to write the basic documentation. Asking someone else to do it is asking them to make guesses --- and that's asking for wrong documentation (of which free software has plenty). In fact, this is usually the real problem with finding free software documentation: not too little documentation, but too much conflicting documentation.</cite>\r\n\r\nExpecting users to write much of the documentation is a terrible practice but there are some uses the programmer doesn't envisage and this is where user docs, in addition to programmer written docs, come in handy.\r\n\r\nAs an example a coder may produce a CMS and produce documentation that describes what each function does etc. but this won't help a user who wants to know how they can use the code (without having to write extra modules) to produce the site they want.\r\n\r\nUsers can often find workarounds - not to bugs in the code but to decisions made by the coder. These workarounds will often enable users to employ functions in ways the coder did not envisage but which are never-the-less valid.\r\n\r\nThere are different types of documentation and it needs to be written from different perspectives. A user manual is not always the same thing as a user guide or a howto and whereas a coder should document a module writing guide or a API manual, it is likely to be an experienced user who can write the best Howto. As an example a programmer may document every menu option and toolbar button of a word processor but a user-written Howto on mail merging may prove more helpful in the first instance.\r\n\r\nOf course there are exceptions to both sides of this but I guess that proves the rule :o)"
-
    name: 'Terry Hancock'
    mail: ''
    subject: 'There are some things a programmer can''t document'
    hostname: 68.93.224.4
    created: '1150868147'
    body: "Absolutely. We aren't talking about a specific package here, so we're handwaving a lot. But, I have encountered code for which there is NO documentation. NONE. Sometimes the filenames give you a vague idea of what is going on, and sometimes they don't.  Sometimes I can read the code and figure out what's going on (but probably only if the program is written in something like Python, which I use myself and is very compact, and even then, only if it's a pretty simple program).\r\n\r\nSo, being a pro-active writer-type who might actually write some documentation if I can ever figure out what to write, I look up the programmer and *ask* him some questions.\r\n\r\nSometimes -- maybe even most of the time -- this step is successful, and the programmer talks to me to answer some questions, and something useful comes out of that. Unfortunately, there are also a few times when he basically tells you to buzz off: needless to say, those are the kind of programs that tend not to get documented very well.\r\n\r\nThe point (well, my point anyway), is that in order for users to start writing HOWTOs and tutorials and other guides, the programmer needs to have written the API guide or the documentation for the menus, etc.\r\n\r\nUnfortunately, another common flaw is to say some thing like:\r\n\r\n\"Open flagrel: Opens the flagrel\".\r\n\r\nWhere \"flagrel\" is some piece of impenetrable jargon that the programmer uses in his daily life, but we are very unclear on. Even more often, it will say:\r\n\r\n\"Open object: Opens the object\".\r\n\r\nThis is even worse, because I *know* what \"object\" means and the programmer *knows* what \"object\" means -- but we may not mean the same thing!\r\n\r\n"
