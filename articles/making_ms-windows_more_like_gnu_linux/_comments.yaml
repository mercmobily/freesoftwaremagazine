-
    name: undefined
    mail: ''
    subject: 'i loath cygwin'
    hostname: 192.91.171.42
    created: '1177466712'
    body: "as they say, <a href=http://en.wikipedia.org/wiki/When_in_Rome>\"when in rome, do as the romans.\"</a>\r\n\r\ngo native!\r\n\r\ncygwin is a (pardon the language, but the literal meaning of the word is very apt) <a href=http://en.wikipedia.org/wiki/Bastard>bastard</a> of windows & linux.\r\n\r\ni used cygwin from 2001-2004 (so my specific criticisms might be dated).  i never developed against it (except to compile a few apps, like tree and perl-tk, that were missing from the distribution), but merely used the environment.  it was installed on my desktop because a software development tool (\"ported\" from unix to windows) required it and i use linux exclusively at home, so i used it.\r\n\r\ncygwin can refer to the cygwin dll, which provides a set of linux-like apis, or the linux-like environment, which provides a gnu/unix environment (bash, gcc, x-windows, and even kde at one time).  my comments are about the environment as i only compiled a few small foss apps against the dll.\r\n\r\n<ul>\r\n<li><strong>dll hell</strong>: because (as i understood it) the cygwin dll used a shared memory region for communication between processes, the formatting of that shared memory was versioned.  this shared memory versioning kept two processes, compiled against different cygwin dll versions, from trashing the shared memory by writing to it in incompatible ways.  add to this a few separate applications that included their own version of cygwin (to support grep or any other gnu utility used by the application; eg searching through source code), and you have dll hell.  while a cygwin dll is loaded, that shared memory region is versioned.  all other cygwin dlls that try to concurrently load must recognize that version or you get a nice pop-up summarizing the cygwin dll version conflict.  and even after that first app ceased executing, the cygwin dll might remain loaded by windows.  the only sure way to unload the dll and clear the shared memory region was rebooting, though logging out was usually sufficient.  this complicated upgrading cygwin, concurrently using applications compiled against different cygwin dll versions, etc.\r\n<li><strong>long process start-up time</strong>: cygwin's grep, cut, tr, sed, awk, etc took ~2-10x longer to start executing than native ports and this problem was exasperated in scripts (which frequently execute external apps).\r\n<li><strong>unexpected interactions between cygwin and native apps</strong>: piping/processing CR & CRLF, bash job control, quoting command-line arguments, etc.\r\n</ul>\r\n\r\nhaving used bash, cmd is pathetic enough to drive anybody to cygwin if only for an interactive shell and scripting, but in the end i settled on the \"native\" cross-platform ipython (and helps sharpen the python skills).\r\n\r\ncygwin provides a nearly perfect build environment for linux/gnu applications (99% successful \"./configure && make && make install\"), but from my experience the trade off is in performance and seamlessness (mixing command-line apps in cmd or integrating x-windows apps into desktop).  native is more difficult to achieve, but i believe it's also more rewarding.\r\n\r\nsome \"native\" cross-platform recommendations:\r\n<ul>\r\n<li><a href=http://unxutils.sourceforge.net/>unxutils</a>\r\n<li><a href=http://gnuwin32.sourceforge.net/>gnuwin32</a>\r\n<li><a href=http://www.gnu.org/software/emacs/windows/ntemacs.html>emacs</a> (or <a href=http://www.vim.org/>vi</a> if you insist ;)\r\n<li><a href=http://www.mingw.org/>mingw</a>\r\n<li><a href=http://www.mingw.org/msys.shtml>msys</a> (when necessary for building with mingw)\r\n<li><a href=http://www.python.org/>python</a> (or perl, php, ruby, etc)\r\n<li>java (<a href=\"http://www.mingw.org/MinGWiki/index.php/Compile with gcj\">gnu</a> or <a href=https://openjdk.dev.java.net/>sun</a>)\r\n<li><a href=http://gladewin32.sourceforge.net/>gtk</a> (<a href=http://www.wxwidgets.org/>wxwidgets</a>, or even <a href=http://www.trolltech.com/developer/downloads/qt/windows>qt</a> now that it's finally open source on windows)\r\n<li><a href=http://ftp.gnome.org/pub/gnome/binaries/win32/>gnome libs</a> (dunno about kde)\r\n<li><a href=http://sourceware.org/pthreads-win32/>pthreads</a> (if porting from linux)\r\n<li><a href=http://www.straightrunning.com/XmingNotes/>x.org</a>\r\n<li>and the best media player on windows: <a href=http://www.mplayerhq.hu/MPlayer/releases/win32/>MPLAYER</a>!\r\n</ul>\r\n\r\nthe most frustrating thing about going native is finding foss apps that build on windows with visual studio (which some would argue is more \"native\" to windows, but is definitely not foss, no matter how pragmatically tempting the \"free-beer\" visual c++ express looks) but have poor or no support for mingw (unmaintained/missing makefiles)."
-
    name: mykeyspace
    mail: ''
    subject: 'Although I agree with the'
    hostname: 213.219.158.41
    created: '1177498078'
    body: "Although I agree with the above user (undefined) that cygwin is less then ideal, sometimes it helps to have some familiar app's around.\r\n\r\nCheck out the <a href=\"http://cygwinports.dotsrc.org/\">cygwin ports project</a>. I found it really helpful, since i could run an xfce environment on my universities windows computer (now i discovered where they keep their slackware pc's). And it has some app's that might be useful."
