-
    name: ''
    mail: ''
    subject: Distribution
    hostname: 64.114.83.92
    created: '1159685615'
    body: "You write, \"Inclusion of that would mean that any kernel licensed under GPLv3 cannot be used where DRM is required for a secure environment. \" \r\n\r\n--- If I get the source code for the Linux kernel, can I not do whatever I like? Is it not only at the distribution point that the license kicks in?"
-
    name: 'Terry Hancock'
    mail: ''
    subject: Hmm...
    hostname: 68.93.224.4
    created: '1159688616'
    body: "I think your runaround case is pretty artificial. No company would be happy with this kind of key-selling arrangement, because it would require the end-user to consciously install the software. Which is precisely the opposite of what such \"blackbox\" vendors want to do.\r\n\r\nWhat you're describing is a similar situation to what Debian has done in the past with \"non-free\" downloadable programs: they would write an \"installer\" package, that would, as it installs, download and install the non-free package. This allowed them to technically avoid \"distributing\" the file (which would be illegal), while making it seem as if the package were included in the Debian distribution.\r\n\r\nIt worked, but it was fragile and hard to maintain. Your hypothetical company would have the same sort of problems. It would be easier for them just to open up the platform.\r\n\r\nEven if all the GPLv3 does is force that kind of runaround, it will have done a pretty good job of discouraging DRM platforms, since it will make them that much less convenient.\r\n\r\nI think the real concern is that the new GPLv3 wording does require these kinds of business model changes in order to work, and after 15 years of finding business models that work for free software, pragmatically-minded people are inclined to fear rocking the boat. And I don't blame them. Business models for free software have worked, but they've always been a bit marginal. There's reason to fear that a little bit of slippage could run you right out of business.\r\n\r\nThe Linux kernel developers are sensitive to this, because they're very much aware of the significant commercial contributions to Linux in recent years, and so it follows that they don't want to see those beneficial relationships harmed.\r\n\r\nOn the other hand, DRM does have the potential to do massive harm to the industry if it is ever adopted wholesale (as certain deep-pocketed interests certainly want it to be).\r\n\r\nOne intriguing idea I've had is that the GPLv3 Section 7 now provides a very simple way to bolt on certain common requirements and to remove just about any of them. The new version of the LGPL demonstrates this. It would be trivial to envision a \"GPLv3-minus-DRM Keys\" (maybe a \"Kernel Public License/KPL\") that would remove the \"Corresponding Source Key\" requirement for those who don't like it. That might defuse the situation a bit, by providing a less-controversial alternative, without throwing out other changes in the GPLv3.\r\n\r\nHowever, based on their recent statements, I don't think the Linux kernel folks are going to adopt even that. There seems to be a pretty strong desire to stick with GPLv2. Fortunately, this has few consequences for those who like GPLv3. The kernel is only one element, and as there remains a \"platform exemption\" in both GPL versions, the platform copyleft doesn't affect the apps that run on it.\r\n\r\nOf course, despite FSF hubris about the importance of the \"GNU system\", the folks who want to \"TiVo-ize\" their Linux blackboxes, can and no doubt will just use Busybox or a BSD-derived set of utilities on top of the Linux or even BSD kernels. Those might even be technically better alternatives for their platforms.\r\n\r\nThere is of course, a subtext in this whole discussion that the hardware is unalterable and that the consumer has little ability to make his own or acquire open hardware. This is an assertion that the embedded hardware is not very free, largely due to monopolistic and industry trust tactics.\r\n\r\nHowever, it so happens that hardware is continuing to get more commoditized and cheaper to create in short runs, so that there is likely to be a new boom in open and free hardware in a few years. The fear of a \"DRM Dystopia\" just feeds this new trend, as developers and savvy users start to seek out alternatives. As more and more examples of the absurd ills of closed and locked-down systems pile up, it becomes easier and easier to sell people on the advantages of free systems.\r\n\r\nI'm personally betting that DRM will die that way: with the platform manufacturers who pushed it realizing that they can't compete, and giving up on the game.\r\n"
-
    name: 'Terry Hancock'
    mail: ''
    subject: Depends...
    hostname: 68.93.224.4
    created: '1159751252'
    body: "\"\"\"\r\nIf I get the source code for the Linux kernel, can I not do whatever I like? Is it not only at the distribution point that the license kicks in?\r\n\"\"\"\r\n\r\nYou can do anything that is otherwise legal. The problem is that signing your code with a private digital key that belongs to the platform DRM company is an illegal circumvention of their DRM system, and thus illegal under the DMCA. That's the “gotcha”. Only by paying for that key from that company can you sign your code so that it will run on the platform.\r\n\r\n\r\n"
-
    name: ''
    mail: ''
    subject: 'Additionnal permission'
    hostname: 216.18.124.229
    created: '1159830211'
    body: "The GPLv3 allows authors to add additional permissions (v2 also did that, it only forbids further restrictions). So people who like DRM could distribute their software under GPLv3 + permission to ignore the key part of the source code definition. Wouldn't that satisfy Linus & co ? \r\n-- \r\nTester"
-
    name: ''
    mail: ''
    subject: 'Tivo violates GPLv2'
    hostname: 66.36.198.42
    created: '1159895542'
    body: "I think the whole Tivoism thing results from an ambiguity in the GPLv2.\r\n\r\nHowever, I think if everyone agreed to interpret the GPLv2 relative to it's intended purposes, then a judge would have to rule Tivo in violation.\r\n\r\nHow is this any different than Micrintosh Inc. distributing a completely encrypted source distribution, where you couldn't even see the source?  People laugh and say, \"What, that's an obvious GPLv2 violation... You can't even read the source in order to change it... It might as well be a stream of zeros...\"  To that, the vendor then says, \"No, it's not like that.  Just pick up our FREE MacdowsPC and you can read, modify, and execute anything from the kernel to the browser. Just log into our website from your MacdowsPC and go to the Macdows Online Program Editor.  When you are done making you're changes, simply click \"Add to Cart!\" (ten cents a line for most programming languages.  Contact us to become an affiliated software vendor) and when you check out you will be directed to a link to download the encrypted executable.  Heck, you can even write your own programs from scratch, in any license, and anyone with a MacdowsPC can run your programs too!\"\r\n\r\nIn both instances, both vendors (Micrintosh and Tivo) are distributing the code for free, they're both technically allowing the code to be viewed and even changed, but they're RESTRICTING the utility of that code (ie. it's execution in it's targeted environment) to only their wallets.  No other derivation of their particular distribution can be of any further utility except when deemed profitable by the vendors.  Not even when it's just for fun.\r\n\r\nThe kernel crew likes to point out that we shouldn't _Assume Purposes_ on what the end user will have for the code -- indeed, the GPL intends that.  But that is what Tivo has violated.  Subsequent end users of the code can no longer re-purpose the code, FOR ANY PURPOSE ALLOWED BY THE GPL, without paying out the nose to %S (for added effect, %S = Hardware Monopoly, Biopoly, or Triopoly).\r\n\r\nThe code is then hijacked.  The free software and open source process that created the FOSS ecosystem, and it's underlying licenses, are short circuited -- diverted from the goals for which the software, and it's rules of distribution, were created.\r\n\r\nAre we going to let our software, our intellectual real estate, be appropriated by the hardware giants?\r\n\r\nNewman\r\n\r\nalien d0t empathy a+ gmail d0t com"
-
    name: taime
    mail: ''
    subject: 'Not all DRM is evil'
    hostname: 81.57.40.8
    created: '1159906829'
    body: 'I can''t see situations where DRM could be useful. Like for GMO, Medical interest is invoked for justifying questionable practices.'
-
    name: 'Ryan Cartwright'
    mail: ''
    subject: 'Medical systems and DRM'
    hostname: 82.108.129.98
    created: '1159967229'
    body: "I too fail to see where there would be a good use for DRM especially in the medical community.\r\n\r\nEncryption of data to protect it from unauthorised parties is one thing (and sensible) but that is not the same as DRM, certainly not in the examples you (Edward) discuss. You speak of DRM in terms of application restriction not data. Why would a medical application require such a restriction (assuming it was not under a proprietary licence)?\r\n\r\nCome to that can someone explain why ANY application would require DRM which interferes with the customer's use of their own data?\r\n\r\nMost DRM in use today restricts what the user can do with data for which they do not hold the copyright. This seems like a good idea except that most of the uses today circumvent the fair usage part of existing copyright law and are used to simply exploit the end user. It also falls down when it comes to an end user using the data they have created for use on the hardware/software containing the DRM.\r\n\r\nDRM in a medical enviroment would benefit nobody except the software vendors - but then perhaps that's the point.\r\n\r\nRyan"
-
    name: 'Terry Hancock'
    mail: ''
    subject: Certification
    hostname: 68.93.224.4
    created: '1160011338'
    body: "Probably the best example of \"non-evil\" DRM is a certification system.\r\n\r\nMedical or safety devices make good examples, because they clearly show the importance of values which might trump your insistence on being able to modify the code.\r\n\r\nIt's easy to imagine a medical device, which, if programmed correctly, will save lives, but if programmed incorrectly, will kill or injure people.\r\n\r\nBut because this is an internal matter of programming, you can't expect the end user to be able to tell this on inspection.\r\n\r\nWhat he <em>can</em> do is see if the device has a certification mark provided by a certification authority who <em>has</em> taken the time to do a due-diligence study of whether the programming of the device is safe. That mark is a kind of TPM, and it reflects our trust in a trained professional authority over our trust in the end user.\r\n\r\nBut if we insist that any end-user has the ability to reprogram the device without making it obvious that they have done so (i.e. by removing the certification mark) then we've defeated a significant safety precaution and a means of ensuring regulatory compliance that is intended to protect the public. So anti-TPM here is a bad thing.\r\n\r\nMoreover, it's not clear whether simply \"indicating\" that the device is not compliant is sufficient. It may be necessary to render it incapable of operating so that it really can't be misused.\r\n\r\nTo see why this might be so, consider the fences they put around power substations. Anybody with half a clue would read the \"High Voltage\" sign and not even try to go near that equipment. Nevertheless, power companies are required to make an effort to physically block anyone who might get hurt from entering the premises (maybe they can't read, have extremely poor judgement, etc, but we are not excused from protecting them to from harm). In fact, if those measures are intentionally defeated by an idiot who tries very hard to electrocute himself, the power company will still get sued for liability in the case.\r\n\r\nLikewise, merely flashing up a BIOS message \"kernel not certified\" may not be sufficient to excuse a medical equipment provider if a hacked device injures someone because of non-certified code being run on it.\r\n\r\nNow you might argue that this is dumb, and the liability laws are what's at fault. And maybe you're right. But why does that kind of discussion even come into a discussion of software licenses?  Because we're over-constraining the problem by restricting users' freedom. These constraints force them not to be able to meet their legal obligations, which is not a position I can easily term \"free\".\r\n\r\nThis would make us just as bad as Microsoft which sells medical offices on computers with \"phone home\" software that violates patient privacy laws. It tries to put the user in violation of the law in order to serve the needs of the producer.\r\n\r\nI'm sure this is not the last word on the subject, but this is the kind of example that is usually cited to defend the idea of TPM measures being a \"neutral technology\" rather than \"inherently evil\".\r\n"
-
    name: ''
    mail: ''
    subject: 'Re: Certification'
    hostname: 216.113.209.29
    created: '1160016951'
    body: "DRM makes no more sense in medical technology than elsewhere.\r\n\r\nThere are any number of circumstances in which the owner of the equipment may wish to modify the software -- generally to fix problems, or refine functionality.  Often this will be contracted to the original vendor -- but it might be the responsibility of of medical technician or specialist.  \r\n\r\nCreating a situation in which ONLY the vender can modify or repair the equipment is a recipe for high costs, vendor lock-in, forced \"upgrades\"/replacement of last-years model, and artificial obselesence (either at the vendors whim or because it's gone out of business) and arguments over whether there are problems needing to be adressed, and how serious those problems actually are. (Sound familiar?  this happens -- and has happened -- in the med-tech field too.)\r\n\r\nIn practice (and i believe, also in law) any UNAUTHORIZED meddling with critical medical equipment is forbidden, and punished if it occurs.  As far as that argument goes, any unqualified idiot can fiddle with a heart-defilibrator, the meds in a paper cup, or even someone's IV drip for that matter.  The simple fact that the equipment contains some sort of processor capable of being DRM'd have nothing to do with the matter, and even less with whether the vendor should be allowed to retain ongoing, ultimate control of the equipment that it sells.\r\n\r\n\r\nBernard Swiss"
-
    name: ''
    mail: ''
    subject: 'About the example'
    hostname: 83.142.20.210
    created: '1160254691'
    body: "Your example shows that it is technically possible to get around the \"DRM\" GPLv3 requirement. I agree to this - but will note that it describes a device being sold without software. If you buy this device, it is still good for nothing - you must then go and get the software, and install it. This complexity will decrease its attractiveness, in practice to a degree where few people will actually buy it.\r\n\r\nI think that in this way GPLv3 achieves its anti-DRM puprose, even if it is theoretically circumventable."
